{
  "name": "delta",

  "imports": [
    { "uri": "http://www.apidoc.me/flow/common/0.0.9/service.json" }
  ],

  "unions": {
    "item_summary": {
      "discriminator": "discriminator",
      "types": [
	{ "type": "project_summary" }
      ]
    }
  },

  "enums": {
    "role": {
      "values": [
	{ "name": "member" },
	{ "name": "admin" }
      ]
    },

    "scms": {
      "values": [
	{ "name": "github" }
      ]
    },

    "publication": {
      "description": "A publication represents something that a user can subscribe to.",
      "values": [
	{ "name": "deployments", "description": "Get notified of all deployments" }
      ]
    },

    "visibility": {
      "values": [
	{ "name": "public" },
	{ "name": "private" }
      ]
    },

    "event_action": {
      "values": [
	{ "name": "started" },
	{ "name": "checkpoint" },
	{ "name": "completed" }
      ]
    }

  },

  "models": {
    
    "reference": {
      "fields": [
	{ "name": "id", "type": "string" }
      ]
    },

    "username_password": {
      "fields": [
	{ "name": "username", "type": "string" },
	{ "name": "password", "type": "string", "required": false }
      ]
    },
    
    "organization": {
      "fields": [
	{ "name": "id", "type": "string" },
	{ "name": "user", "type": "user_summary", "description": "The user that created this organization" }
      ]
    },

    "organization_summary": {
      "fields": [
	{ "name": "id", "type": "string" }
      ]
    },

    "organization_form": {
      "fields": [
	{ "name": "id", "type": "string" }
      ]
    },

    "project": {
      "fields": [
	{ "name": "id", "type": "string" },
	{ "name": "organization", "type": "organization_summary" },
	{ "name": "user", "type": "reference", "description": "The user that created this project" },
	{ "name": "visibility", "type": "visibility" },
	{ "name": "scms", "type": "scms" },
	{ "name": "name", "type": "string" },
	{ "name": "uri", "type": "string" }
      ]
    },

    "project_summary": {
      "fields": [
	{ "name": "id", "type": "string" },
	{ "name": "organization", "type": "organization_summary" },
	{ "name": "name", "type": "string" },
    { "name": "uri", "type": "string" }
      ]
    },

    "project_form": {
      "fields": [
	{ "name": "organization", "type": "string" },
	{ "name": "name", "type": "string" },
	{ "name": "visibility", "type": "visibility" },
	{ "name": "scms", "type": "scms" },
	{ "name": "uri", "type": "string" }
      ]
    },
    
    "project_state": {
      "description": "Returns the latest expected and actual states for this project",
      "fields": [
        { "name": "expected", "type": "state", "required": false },
        { "name": "actual", "type": "state", "required": false }
      ]
    },

    "state": {
      "description": "Used to describe the actual state of a project in AWS. Specifically which versions are running",
      "fields": [
        { "name": "timestamp", "type": "date-time-iso8601", "example": "Date / time that this state was captured" },
        { "name": "versions", "type": "[version]" }
      ]
    },
    
    "version": {
      "fields": [
        { "name": "name", "type": "string", "example": "0.0.1" },
        { "name": "instances", "type": "long", "description": "The number of instances running this version" }
      ]
    },

    "state_form": {
      "fields": [
        { "name": "versions", "type": "[version]" }
      ]
    },
    
    "repository": {
      "fields": [
	{ "name": "name", "type": "string" },
	{ "name": "visibility", "type": "visibility" },
	{ "name": "uri", "type": "string" }
      ]
    },
    
    "user_form": {
      "fields": [
	{ "name": "email", "type": "string", "required": false },
	{ "name": "name", "type": "io.flow.common.v0.models.name", "required": false }
      ]
    },

    "github_user_form": {
      "fields": [
	{ "name": "user_id", "type": "string" },
	{ "name": "github_user_id", "type": "long" },
	{ "name": "login", "type": "string" }
      ]
    },
    
    "github_user": {
      "fields": [
	{ "name": "id", "type": "string" },
        { "name": "user", "type": "reference" },
	{ "name": "github_user_id", "type": "long" },
	{ "name": "login", "type": "string" }
      ]
    },

    "github_authentication_form": {
      "description": "Used to authenticate user based on the oauth code we receive from github",
      "fields": [
        { "name": "code", "type": "string" }
      ]
    },

    "user_identifier": {
      "fields": [
	{ "name": "id", "type": "string" },
        { "name": "user", "type": "reference" },
	{ "name": "value", "type": "string" }
      ]
    },

    "token": {
      "fields": [
	{ "name": "id", "type": "string" },
        { "name": "user", "type": "reference" },
	{ "name": "masked", "type": "string" },
	{ "name": "cleartext", "type": "string", "required": false, "description": "The cleartext token. Only available when the token is initially created" },
	{ "name": "description", "type": "string", "required": false }
      ]
    },

    "token_form": {
      "fields": [
	{ "name": "user_id", "type": "string" },
	{ "name": "description", "type": "string", "required": false }
      ]
    },
    
    "subscription": {
      "description": "Represents a user that is currently subscribed to a publication",
      "fields": [
	{ "name": "id", "type": "string", "description": "Internal unique identifier for this subscription record" },
	{ "name": "user", "type": "reference" },
	{ "name": "publication", "type": "publication" }
      ]
    },

    "subscription_form": {
      "fields": [
	{ "name": "user_id", "type": "string" },
	{ "name": "publication", "type": "publication" }
      ]
    },

    "item": {
      "description": "A denormalization of item content for search",
      "fields": [
        { "name": "id", "type": "string", "description": "Unique identifier for this item." },
        { "name": "organization", "type": "organization_summary" },
	{ "name": "visibility", "type": "visibility" },
        { "name": "summary", "type": "item_summary" },
        { "name": "label", "type": "string" },
        { "name": "description", "type": "string", "required": false }
      ]
    },

    "user_summary": {
      "fields": [
	{ "name": "id", "type": "string" },
	{ "name": "email", "type": "string", "required": false },
	{ "name": "name", "type": "io.flow.common.v0.models.name" }
      ]
    },

    "membership": {
      "description": "A user can belong to one or more organizations via memberships.",
      "fields": [
        { "name": "id", "type": "string", "description": "Unique identifier for this membership" },
        { "name": "user", "type": "user_summary" },
        { "name": "organization", "type": "organization_summary" },
	{ "name": "role", "type": "role" }
      ]
    },

    "membership_form": {
      "fields": [
        { "name": "user_id", "type": "string" },
        { "name": "organization", "type": "string" },
        { "name": "role", "type": "role", "default": "member" }
      ]
    },

    "github_webhook": {
      "description": "Defines a github hook",
      "fields": [
        {
          "name": "id",
          "type": "long"
        }
      ]
    },

    "image" : {
      "fields": [
        { "name": "id", "type": "string" },
        { "name": "project", "type": "project_summary" },
        { "name": "name", "type": "string" },
        { "name": "version", "type": "string" }
      ]
    },

    "image_form" : {
      "fields": [
        { "name": "project_id", "type": "string" },
        { "name": "name", "type": "string" },
        { "name": "version", "type": "string" }
      ]
    },

    "event": {
      "fields": [
        { "name": "id", "type": "string" },
        { "name": "created_at", "type": "date-time-iso8601" },
        { "name": "action", "type": "event_action" },
        { "name": "summary", "type": "string" },
        { "name": "error", "type": "string", "required": false }
      ]
    },

    "sha": {
      "fields": [
        { "name": "id", "type": "string" },
        { "name": "project", "type": "project_summary" },
        { "name": "created_at", "type": "date-time-iso8601" },
        { "name": "branch", "type": "string" },
        { "name": "hash", "type": "string" }
      ]
    },

    "tag": {
      "fields": [
        { "name": "id", "type": "string" },
        { "name": "project", "type": "project_summary" },
        { "name": "created_at", "type": "date-time-iso8601" },
        { "name": "name", "type": "string" },
        { "name": "hash", "type": "string" }
      ]
    }

  },

  "resources": {

    "io.flow.common.v0.models.healthcheck": {
      "path": "/_internal_",
      "operations": [
        {
          "method": "GET",
	  "path": "/healthcheck",
          "responses": {
            "200": { "type": "io.flow.common.v0.models.healthcheck" }
          }
        }
      ]
    },

    "github_user": {
      "path": "/authentications",
      "operations": [
	{
	  "method": "POST",
	  "path": "/github",
	  "description": "Used to authenticate a user via github",
	  "body": { "type": "github_authentication_form" },
          "responses": {
            "200": { "type": "io.flow.common.v0.models.user" },
            "422": { "type": "[io.flow.common.v0.models.error]" }
	  }
	}
      ]
    },

    "io.flow.common.v0.models.user": {
      "path": "/users",

      "operations": [
        {
          "method": "GET",
          "description": "Search for a specific user. You must specify at least 1 parameter - either a id or email - and will receive back either 0 or 1 users.",
          "parameters": [
            { "name": "id", "type": "string", "description": "Find user with this id. Exact match", "required": false },
            { "name": "email", "type": "string", "description": "Find user with this email address. Case in-sensitive. Exact match", "required": false },
	    { "name": "identifier", "type": "string", "description": "Find user associated with this randomly generated identifier. Exact match", "required": false }
          ],
          "responses": {
            "200": { "type": "[io.flow.common.v0.models.user]" },
            "401": { "type": "unit" }
          }
        },

        {
          "method": "GET",
          "description": "Returns information about the user with this id.",
          "path": "/:id",
          "responses": {
            "200": { "type": "io.flow.common.v0.models.user" },
            "401": { "type": "unit" },
            "404": { "type": "unit" }
          }
        },

        {
          "method": "GET",
          "description": "Returns the latest identifier for this user. The basic use case is to enable things like unsubscribe w/out  login (and thus once you have an identifier, you can GET /users?identifier=xxx). Identifiers are rotated regularly with last n identifiers being valid (allowing eventual expiration).",
          "path": "/:id/identifier",
          "responses": {
            "200": { "type": "user_identifier" },
            "401": { "type": "unit" },
            "404": { "type": "unit" }
          }
        },

        {
          "method": "POST",
          "description": "Create a new user.",
          "body": { "type": "user_form" },
          "responses": {
            "201": { "type": "io.flow.common.v0.models.user" },
            "422": { "type": "[io.flow.common.v0.models.error]" }
          }
        }
      ]
    },

    "project": {
      "operations": [
        {
          "method": "GET",
          "description": "Search projects. Results are paginated",
          "parameters": [
	    { "name": "id", "type": "[string]", "description": "Filter by any one of these ids", "required": false },
	    { "name": "organization", "type": "string", "description": "Filter to resolvers belongs to the organization with this key", "required": false },
            { "name": "name", "type": "string", "description": "Find project with this name. Case in-sensitive. Exact match", "required": false },
	    { "name": "limit", "type": "long", "default": 25, "description": "The number of records to return", "minimum": 1, "maximum": 100 },
            { "name": "offset", "type": "long", "default": 0, "description": "Used to paginate. First page of results is 0.", "minimum": 0 },
            { "name": "sort", "type": "string", "default": "projects.id" }            
          ],
          "responses": {
            "200": { "type": "[project]" },
            "401": { "type": "unit" }
          }
        },

        {
          "method": "GET",
          "description": "Returns information about the project with this id.",
          "path": "/:id",
          "responses": {
            "200": { "type": "project" },
            "401": { "type": "unit" },
            "404": { "type": "unit" }
          }
        },

        {
          "method": "POST",
          "description": "Create a new project.",
          "body": { "type": "project_form" },
          "responses": {
            "201": { "type": "project" },
            "401": { "type": "unit" },
            "422": { "type": "[io.flow.common.v0.models.error]" }
          }
        },

        {
          "method": "PUT",
	  "path": "/:id",
          "description": "Update an existing project.",
          "body": { "type": "project_form" },
          "responses": {
            "200": { "type": "project", "description": "Project successfully updated" },
            "401": { "type": "unit" },
            "422": { "type": "[io.flow.common.v0.models.error]" }
          }
        },

	{
	  "method": "DELETE",
	  "path": "/:id",
          "responses": {
            "204": { "type": "unit" },
            "401": { "type": "unit" },
            "404": { "type": "unit" }
          }
        },

        {
          "method": "GET",
          "path": "/:id/state/latest",
          "responses": {
            "200": { "type": "project_state" },
            "401": { "type": "unit" },
            "404": { "type": "unit" }
          }
        },

        {
          "method": "GET",
          "path": "/:id/state/expected",
          "responses": {
            "200": { "type": "[state]" },
            "401": { "type": "unit" },
            "404": { "type": "unit" }
          }
        },

        {
          "method": "POST",
          "path": "/:id/state/expected",
          "responses": {
            "200": { "type": "[state_form]" },
            "401": { "type": "unit" },
            "404": { "type": "unit" }
          }
        },

        {
          "method": "GET",
          "path": "/:id/state/actual",
          "responses": {
            "200": { "type": "[state]" },
            "401": { "type": "unit" },
            "404": { "type": "unit" }
          }
        }

      ]
    },

    "organization": {
      "operations": [
        {
          "method": "GET",
          "description": "Search organizations. Results are paginated",
          "parameters": [
	    { "name": "id", "type": "[string]", "description": "Filter by any one of these ids", "required": false },
            { "name": "user_id", "type": "string", "description": "Find organizations that this user has access to", "required": false },
	    { "name": "limit", "type": "long", "default": 25, "description": "The number of records to return", "minimum": 1, "maximum": 100 },
            { "name": "offset", "type": "long", "default": 0, "description": "Used to paginate. First page of results is 0.", "minimum": 0 },
            { "name": "sort", "type": "string", "default": "organizations.id" }
          ],
          "responses": {
            "200": { "type": "[organization]" },
            "401": { "type": "unit" }
          }
        },

        {
          "method": "GET",
          "description": "Returns information about the organization with this id.",
          "path": "/:id",
          "responses": {
            "200": { "type": "organization" },
            "401": { "type": "unit" },
            "404": { "type": "unit" }
          }
        },

        {
          "method": "POST",
          "description": "Create a new organization.",
          "body": { "type": "organization_form" },
          "responses": {
            "201": { "type": "organization" },
            "401": { "type": "unit" },
            "422": { "type": "[io.flow.common.v0.models.error]" }
          }
        },

        {
          "method": "PUT",
	  "path": "/:id",
          "description": "Update an existing organization.",
          "body": { "type": "organization_form" },
          "responses": {
            "200": { "type": "organization", "description": "Organization successfully updated" },
            "401": { "type": "unit" },
            "422": { "type": "[io.flow.common.v0.models.error]" }
          }
        },

	{
	  "method": "DELETE",
	  "path": "/:id",
          "responses": {
            "204": { "type": "unit" },
            "401": { "type": "unit" },
            "404": { "type": "unit" }
          }
        }
      ]
    },

    "membership": {
      "operations": [
        {
          "method": "GET",
          "description": "Search all memberships. Results are always paginated.",
          "parameters": [
	    { "name": "id", "type": "[string]", "description": "Filter by any one of these ids", "required": false },
            { "name": "organization", "type": "string", "required": false, "description": "Filter to organization with this key. Case insensitive" },
            { "name": "user_id", "type": "string", "required": false },
            { "name": "role", "type": "role", "required": false },
            { "name": "limit", "type": "long", "default": 25, "description": "The number of records to return", "minimum": 1, "maximum": 100 },
            { "name": "offset", "type": "long", "default": 0, "description": "Used to paginate. First page of results is 0.", "minimum": 0 },
            { "name": "sort", "type": "string", "default": "-memberships.created_at" }
          ],
          "responses": {
            "200": { "type": "[membership]" },
            "401": { "type": "unit" }
          }
        },

        {
          "method": "GET",
          "path": "/:id",
	  "responses": {
	    "200": { "type": "membership" },
            "401": { "type": "unit" },
            "404": { "type": "unit" }
	  }
        },

        {
          "method": "POST",
          "body": { "type": "membership_form" },
	  "responses": {
	    "201": { "type": "membership" },
            "401": { "type": "unit" },
            "404": { "type": "unit" },
            "422": { "type": "[io.flow.common.v0.models.error]" }
	  }
        },

        {
          "method": "DELETE",
          "path": "/:id",
	  "responses": {
	    "204": { "type": "unit" },
            "401": { "type": "unit" },
            "404": { "type": "unit" }
	  }
        }
      ]
    },

    "repository": {
      "operations": [
	{
          "method": "GET",
	  "path": "/github",
          "description": "Returns a list of repositories from github",
          "parameters": [
	    { "name": "name", "type": "string", "required": false, "description": "Optionally filter by repo name. Case in-sensitive. Exact match" },
	    { "name": "organization_id", "type": "string", "required": false, "description": "If specified, we enable additional filtering by this organization (see existing_project parameter)." },
	    { "name": "existing_project", "type": "boolean", "required": false, "description": "Optionally filter by repositories that are either already mapped to existing projects or not. Requires organization_id parameter to also be specified." },
	    { "name": "limit", "type": "long", "default": 25, "description": "The number of records to return", "minimum": 1, "maximum": 100 },
	    { "name": "offset", "type": "long", "default": 0, "description": "Used to paginate. First page of results is 0.", "minimum": 0 }
          ],
          "responses": {
	    "200": { "type": "[repository]" },
	    "401": { "type": "unit" },
            "422": { "type": "[io.flow.common.v0.models.error]" }
          }
	}
      ]
    },

    "subscription": {
      "operations": [
        {
          "method": "GET",
          "description": "Search subscriptions. Always paginated.",
          "parameters": [
	    { "name": "id", "type": "[string]", "description": "Filter by any one of these ids", "required": false },
            { "name": "user_id", "type": "string", "description": "Find subscriptions for this user.", "required": false },
	    { "name": "identifier", "type": "string", "description": "Find subscriptions associated with this user identifier. Exact match", "required": false },
            { "name": "publication", "type": "publication", "description": "Find subscriptions for this publication.", "required": false },
            { "name": "limit", "type": "long", "default": 25, "description": "The number of records to return", "minimum": 1, "maximum": 100 },
            { "name": "offset", "type": "long", "default": 0, "description": "Used to paginate. First page of results is 0.", "minimum": 0 },
            { "name": "sort", "type": "string", "default": "-subscriptions.created_at" }
          ],
          "responses": {
            "200": { "type": "[subscription]" },
	    "401": { "type": "unit" }
          }
        },

        {
          "method": "GET",
          "description": "Returns information about a specific subscription.",
          "path": "/:id",
          "responses": {
            "200": { "type": "subscription" },
            "401": { "type": "unit" },
            "404": { "type": "unit" }
          }
        },

        {
          "method": "POST",
          "description": "Create a new subscription.",
	  "parameters": [
	    { "name": "identifier", "type": "string", "description": "If a user identifier is provided, authentication is bypassed", "required": false }
	  ],
          "body": { "type": "subscription_form" },
          "responses": {
            "201": { "type": "subscription" },
            "401": { "type": "unit" },
            "422": { "type": "[io.flow.common.v0.models.error]" }
          }
        },

        {
          "method": "DELETE",
	  "path": "/:id",
	  "parameters": [
	    { "name": "identifier", "type": "string", "description": "If a user identifier is provided, authentication is bypassed", "required": false }
	  ],
	  "responses": {
            "204": { "type": "unit" },
            "401": { "type": "unit" },
            "404": { "type": "unit" }
          }

        }
      ]
    },

    "item": {
      "operations": [
	{
          "method": "GET",
          "description": "Returns a list of all matching items",
          "parameters": [
	    { "name": "q", "type": "string", "required": false, "description": "Actual search query" },
	    { "name": "limit", "type": "long", "default": 25, "description": "The number of records to return", "minimum": 1, "maximum": 100 },
	    { "name": "offset", "type": "long", "default": 0, "description": "Used to paginate. First page of results is 0.", "minimum": 0 }
          ],
          "responses": {
	    "200": { "type": "[item]" },
	    "401": { "type": "unit" }
          }
	}
      ]
    },

    "token": {
      "operations": [
	{
	  "method": "GET",
	  "parameters": [
	    { "name": "id", "type": "[string]", "description": "Filter by any one of these ids", "required": false },
            { "name": "user_id", "type": "string", "description": "Find tokens for this user.", "required": false },
            { "name": "limit", "type": "long", "default": 25, "description": "The number of records to return", "minimum": 1, "maximum": 100 },
            { "name": "offset", "type": "long", "default": 0, "description": "Used to paginate. First page of results is 0.", "minimum": 0 },
            { "name": "sort", "type": "string", "default": "-tokens.created_at" }
	  ],
          "responses": {
            "200": { "type": "[token]" },
            "401": { "type": "unit" }
          }
	},

	{
	  "method": "GET",
	  "description": "Used to fetch one token",
	  "path": "/:id",
          "responses": {
            "200": { "type": "token" },
            "401": { "type": "unit" },
            "404": { "type": "unit" }
          }
	},

	{
	  "method": "POST",
	  "description": "Create a new API token for this user",
	  "body": { "type": "token_form" },
          "responses": {
            "201": { "type": "token" },
	    "401": { "type": "unit" },
            "422": { "type": "[io.flow.common.v0.models.error]" }
          }
	},

        {
          "method": "DELETE",
	  "path": "/:id",
	  "responses": {
            "204": { "type": "unit" },
            "401": { "type": "unit" },
            "404": { "type": "unit" }
          }

        }

      ]
    },

    "github_webhook": {
      "path": "/webhooks/github",
      "description": "The target of the github webooks",

      "operations": [
	{
	  "method": "POST",
	  "path": "/:project_id",
	  "description": "Receives a webhook on push for this particular project"
	}
      ]
    },

    "image": {
      "operations": [
        {
          "method": "GET",
          "description": "Returns a list of all matching images",
          "parameters": [
            { "name": "name", "type": "string", "required": false, "description": "Optionally filter by repo name. Case in-sensitive. Exact match" },
            { "name": "limit", "type": "long", "default": 25, "description": "The number of records to return", "minimum": 1, "maximum": 100 },
            { "name": "offset", "type": "long", "default": 0, "description": "Used to paginate. First page of results is 0.", "minimum": 0 },
            { "name": "sort", "type": "string", "default": "lower(images.name)" }
          ],
          "responses": {
            "200": { "type": "[image]" },
            "401": { "type": "unit" }
          }
        }
      ]
    },

    "tag": {
      "operations": [
        {
          "method": "GET",
          "parameters": [
	    { "name": "id", "type": "[string]", "description": "Filter by any one of these ids", "required": false },
            { "name": "project_id", "type": "string", "description": "Find tags for this project.", "required": false },
            { "name": "name", "type": "string", "description": "Find tags with this name.", "required": false, "example": "0.0.1" },
            { "name": "limit", "type": "long", "default": 25, "description": "The number of records to return", "minimum": 1, "maximum": 100 },
            { "name": "offset", "type": "long", "default": 0, "description": "Used to paginate. First page of results is 0.", "minimum": 0 },
            { "name": "sort", "type": "string", "default": "-tags.created_at" }
	  ],
          "responses": {
            "200": { "type": "[tag]" },
            "401": { "type": "unit" }
          }
	},

	{
	  "method": "GET",
	  "path": "/:id",
          "responses": {
            "200": { "type": "tag" },
            "401": { "type": "unit" },
            "404": { "type": "unit" }
          }
	},

        {
          "method": "DELETE",
	  "path": "/:id",
	  "responses": {
            "204": { "type": "unit" },
            "401": { "type": "unit" },
            "404": { "type": "unit" }
          }

        }
        
      ]
    },

    "sha": {
      "operations": [
        {
          "method": "GET",
          "parameters": [
	    { "name": "id", "type": "[string]", "description": "Filter by any one of these ids", "required": false },
            { "name": "project_id", "type": "string", "description": "Find shas for this project.", "required": false },
            { "name": "branch", "type": "string", "description": "Find shas for this branch.", "required": false, "example": "master" },
            { "name": "hash", "type": "string", "description": "Find shas for this hash.", "required": false, "example": "master" },
            { "name": "limit", "type": "long", "default": 25, "description": "The number of records to return", "minimum": 1, "maximum": 100 },
            { "name": "offset", "type": "long", "default": 0, "description": "Used to paginate. First page of results is 0.", "minimum": 0 },
            { "name": "sort", "type": "string", "default": "-shas.created_at" }
	  ],
          "responses": {
            "200": { "type": "[sha]" },
            "401": { "type": "unit" }
          }
	},

	{
	  "method": "GET",
	  "path": "/:id",
          "responses": {
            "200": { "type": "sha" },
            "401": { "type": "unit" },
            "404": { "type": "unit" }
          }
	},

        {
          "method": "DELETE",
	  "path": "/:id",
	  "responses": {
            "204": { "type": "unit" },
            "401": { "type": "unit" },
            "404": { "type": "unit" }
          }

        }
        
      ]
    },

    "event": {
      "operations": [
        {
          "method": "GET",
          "parameters": [
	    { "name": "id", "type": "[string]", "description": "Filter by any one of these ids", "required": false },
            { "name": "project_id", "type": "string", "description": "Find events for this project.", "required": false },
            { "name": "limit", "type": "long", "default": 25, "description": "The number of records to return", "minimum": 1, "maximum": 100 },
            { "name": "offset", "type": "long", "default": 0, "description": "Used to paginate. First page of results is 0.", "minimum": 0 },
            { "name": "sort", "type": "string", "default": "-events.created_at" }
	  ],
          "responses": {
            "200": { "type": "[event]" },
            "401": { "type": "unit" }
          }
	},

	{
	  "method": "GET",
	  "path": "/:id",
          "responses": {
            "200": { "type": "event" },
            "401": { "type": "unit" },
            "404": { "type": "unit" }
          }
        }
        
      ]
    }

  }

}
