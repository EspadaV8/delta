# Generated by apidoc - http://www.apidoc.me
# Service version: 0.0.3
# apidoc:0.11.8 http://www.apidoc.me/flow/delta/0.0.3/play_2_x_routes

GET        /events                          controllers.Events.get(id: _root_.scala.Option[List[String]], project_id: _root_.scala.Option[String], limit: Long ?= 25, offset: Long ?= 0, sort: String ?= "-events.created_at")
GET        /events/:id                      controllers.Events.getById(id: String)
POST       /authentications/github          controllers.GithubUsers.postGithub()
POST       /webhooks/github/:project_id     controllers.GithubWebhooks.postByProjectId(project_id: String)
GET        /images                          controllers.Images.get(name: _root_.scala.Option[String], limit: Long ?= 25, offset: Long ?= 0, sort: String ?= "lower(images.name)")
GET        /_internal_/healthcheck          controllers.Healthchecks.getHealthcheck()
GET        /users                           controllers.Users.get(id: _root_.scala.Option[String], email: _root_.scala.Option[String], identifier: _root_.scala.Option[String])
GET        /users/:id                       controllers.Users.getById(id: String)
GET        /users/:id/identifier            controllers.Users.getIdentifierById(id: String)
POST       /users                           controllers.Users.post()
GET        /items                           controllers.Items.get(q: _root_.scala.Option[String], limit: Long ?= 25, offset: Long ?= 0)
GET        /memberships                     controllers.Memberships.get(id: _root_.scala.Option[List[String]], organization: _root_.scala.Option[String], user_id: _root_.scala.Option[String], role: _root_.scala.Option[io.flow.delta.v0.models.Role], limit: Long ?= 25, offset: Long ?= 0, sort: String ?= "-memberships.created_at")
GET        /memberships/:id                 controllers.Memberships.getById(id: String)
POST       /memberships                     controllers.Memberships.post()
DELETE     /memberships/:id                 controllers.Memberships.deleteById(id: String)
GET        /organizations                   controllers.Organizations.get(id: _root_.scala.Option[List[String]], user_id: _root_.scala.Option[String], limit: Long ?= 25, offset: Long ?= 0, sort: String ?= "organizations.id")
GET        /organizations/:id               controllers.Organizations.getById(id: String)
POST       /organizations                   controllers.Organizations.post()
PUT        /organizations/:id               controllers.Organizations.putById(id: String)
DELETE     /organizations/:id               controllers.Organizations.deleteById(id: String)
GET        /projects                        controllers.Projects.get(id: _root_.scala.Option[List[String]], organization: _root_.scala.Option[String], name: _root_.scala.Option[String], limit: Long ?= 25, offset: Long ?= 0, sort: String ?= "projects.id")
GET        /projects/:id                    controllers.Projects.getById(id: String)
POST       /projects                        controllers.Projects.post()
PUT        /projects/:id                    controllers.Projects.putById(id: String)
DELETE     /projects/:id                    controllers.Projects.deleteById(id: String)
GET        /projects/:id/state/latest       controllers.Projects.getStateAndLatestById(id: String)
GET        /projects/:id/state/expected     controllers.Projects.getStateAndExpectedById(id: String)
POST       /projects/:id/state/expected     controllers.Projects.postStateAndExpectedById(id: String)
GET        /projects/:id/state/actual       controllers.Projects.getStateAndActualById(id: String)
GET        /repositories/github             controllers.Repositories.getGithub(name: _root_.scala.Option[String], organization_id: _root_.scala.Option[String], existing_project: _root_.scala.Option[Boolean], limit: Long ?= 25, offset: Long ?= 0)
GET        /shas                            controllers.Shas.get(id: _root_.scala.Option[List[String]], project_id: _root_.scala.Option[String], branch: _root_.scala.Option[String], hash: _root_.scala.Option[String], limit: Long ?= 25, offset: Long ?= 0, sort: String ?= "-sha.created_at")
GET        /shas/:id                        controllers.Shas.getById(id: String)
DELETE     /shas/:id                        controllers.Shas.deleteById(id: String)
GET        /subscriptions                   controllers.Subscriptions.get(id: _root_.scala.Option[List[String]], user_id: _root_.scala.Option[String], identifier: _root_.scala.Option[String], publication: _root_.scala.Option[io.flow.delta.v0.models.Publication], limit: Long ?= 25, offset: Long ?= 0, sort: String ?= "-subscriptions.created_at")
GET        /subscriptions/:id               controllers.Subscriptions.getById(id: String)
POST       /subscriptions                   controllers.Subscriptions.post(identifier: _root_.scala.Option[String])
DELETE     /subscriptions/:id               controllers.Subscriptions.deleteById(id: String, identifier: _root_.scala.Option[String])
GET        /tags                            controllers.Tags.get(id: _root_.scala.Option[List[String]], project_id: _root_.scala.Option[String], name: _root_.scala.Option[String], limit: Long ?= 25, offset: Long ?= 0, sort: String ?= "-tags.created_at")
GET        /tags/:id                        controllers.Tags.getById(id: String)
DELETE     /tags/:id                        controllers.Tags.deleteById(id: String)
GET        /tokens                          controllers.Tokens.get(id: _root_.scala.Option[List[String]], user_id: _root_.scala.Option[String], limit: Long ?= 25, offset: Long ?= 0, sort: String ?= "-tokens.created_at")
GET        /tokens/:id                      controllers.Tokens.getById(id: String)
POST       /tokens                          controllers.Tokens.post()
DELETE     /tokens/:id                      controllers.Tokens.deleteById(id: String)