/**
 * Generated by apidoc - http://www.apidoc.me
 * Service version: 0.0.2
 * apidoc:0.11.8 http://www.apidoc.me/flow/delta/0.0.2/anorm_2_x_parsers
 */
import anorm._

package io.flow.delta.v0.anorm.parsers {

  import io.flow.delta.v0.anorm.conversions.Json._

  object EventType {

    def parserWithPrefix(prefix: String, sep: String = "_") = parser(s"$prefix${sep}name")

    def parser(name: String = "event_type"): RowParser[io.flow.delta.v0.models.EventType] = {
      SqlParser.str(name) map {
        case value => io.flow.delta.v0.models.EventType(value)
      }
    }

  }

  object Deployment {

    def parserWithPrefix(prefix: String, sep: String = "_") = parser(
      id = s"$prefix${sep}id",
      imagePrefix = s"$prefix${sep}image",
      userPrefix = s"$prefix${sep}user",
      events = s"$prefix${sep}events"
    )

    def parser(
      id: String = "id",
      imagePrefix: String = "image",
      userPrefix: String = "user",
      events: String = "events"
    ): RowParser[io.flow.delta.v0.models.Deployment] = {
      SqlParser.str(id) ~
      io.flow.delta.v0.anorm.parsers.Image.parserWithPrefix(imagePrefix) ~
      io.flow.common.v0.anorm.parsers.User.parserWithPrefix(userPrefix) ~
      SqlParser.get[Seq[io.flow.delta.v0.models.Event]](events) map {
        case id ~ image ~ user ~ events => {
          io.flow.delta.v0.models.Deployment(
            id = id,
            image = image,
            user = user,
            events = events
          )
        }
      }
    }

  }

  object Event {

    def parserWithPrefix(prefix: String, sep: String = "_") = parser(
      id = s"$prefix${sep}id",
      `type` = s"$prefix${sep}type",
      timestamp = s"$prefix${sep}timestamp",
      message = s"$prefix${sep}message"
    )

    def parser(
      id: String = "id",
      `type`: String = "type",
      timestamp: String = "timestamp",
      message: String = "message"
    ): RowParser[io.flow.delta.v0.models.Event] = {
      SqlParser.str(id) ~
      io.flow.delta.v0.anorm.parsers.EventType.parser(`type`) ~
      SqlParser.get[_root_.org.joda.time.DateTime](timestamp) ~
      SqlParser.str(message).? map {
        case id ~ typeInstance ~ timestamp ~ message => {
          io.flow.delta.v0.models.Event(
            id = id,
            `type` = typeInstance,
            timestamp = timestamp,
            message = message
          )
        }
      }
    }

  }

  object Image {

    def parserWithPrefix(prefix: String, sep: String = "_") = parser(
      id = s"$prefix${sep}id"
    )

    def parser(
      id: String = "id"
    ): RowParser[io.flow.delta.v0.models.Image] = {
      SqlParser.str(id) map {
        case id => {
          io.flow.delta.v0.models.Image(
            id = id
          )
        }
      }
    }

  }

  object Project {

    def parserWithPrefix(prefix: String, sep: String = "_") = parser(
      id = s"$prefix${sep}id",
      organizationPrefix = s"$prefix${sep}organization",
      masterSha = s"$prefix${sep}master_sha"
    )

    def parser(
      id: String = "id",
      organizationPrefix: String = "organization",
      masterSha: String = "master_sha"
    ): RowParser[io.flow.delta.v0.models.Project] = {
      SqlParser.str(id) ~
      io.flow.common.v0.anorm.parsers.OrganizationSummary.parserWithPrefix(organizationPrefix) ~
      SqlParser.str(masterSha) map {
        case id ~ organization ~ masterSha => {
          io.flow.delta.v0.models.Project(
            id = id,
            organization = organization,
            masterSha = masterSha
          )
        }
      }
    }

  }

  object ProjectForm {

    def parserWithPrefix(prefix: String, sep: String = "_") = parser(
      id = s"$prefix${sep}id",
      organization = s"$prefix${sep}organization",
      masterSha = s"$prefix${sep}master_sha"
    )

    def parser(
      id: String = "id",
      organization: String = "organization",
      masterSha: String = "master_sha"
    ): RowParser[io.flow.delta.v0.models.ProjectForm] = {
      SqlParser.str(id) ~
      SqlParser.str(organization) ~
      SqlParser.str(masterSha) map {
        case id ~ organization ~ masterSha => {
          io.flow.delta.v0.models.ProjectForm(
            id = id,
            organization = organization,
            masterSha = masterSha
          )
        }
      }
    }

  }

  object ProjectPutForm {

    def parserWithPrefix(prefix: String, sep: String = "_") = parser(
      organization = s"$prefix${sep}organization",
      masterSha = s"$prefix${sep}master_sha"
    )

    def parser(
      organization: String = "organization",
      masterSha: String = "master_sha"
    ): RowParser[io.flow.delta.v0.models.ProjectPutForm] = {
      SqlParser.str(organization) ~
      SqlParser.str(masterSha) map {
        case organization ~ masterSha => {
          io.flow.delta.v0.models.ProjectPutForm(
            organization = organization,
            masterSha = masterSha
          )
        }
      }
    }

  }

  object ProjectReference {

    def parserWithPrefix(prefix: String, sep: String = "_") = parser(
      id = s"$prefix${sep}id"
    )

    def parser(
      id: String = "id"
    ): RowParser[io.flow.delta.v0.models.ProjectReference] = {
      SqlParser.str(id) map {
        case id => {
          io.flow.delta.v0.models.ProjectReference(
            id = id
          )
        }
      }
    }

  }

  object ProjectVersion {

    def parserWithPrefix(prefix: String, sep: String = "_") = parser(
      id = s"$prefix${sep}id",
      timestamp = s"$prefix${sep}timestamp",
      `type` = s"$prefix${sep}type",
      projectPrefix = s"$prefix${sep}project"
    )

    def parser(
      id: String = "id",
      timestamp: String = "timestamp",
      `type`: String = "type",
      projectPrefix: String = "project"
    ): RowParser[io.flow.delta.v0.models.ProjectVersion] = {
      SqlParser.str(id) ~
      SqlParser.get[_root_.org.joda.time.DateTime](timestamp) ~
      io.flow.common.v0.anorm.parsers.ChangeType.parser(`type`) ~
      io.flow.delta.v0.anorm.parsers.Project.parserWithPrefix(projectPrefix) map {
        case id ~ timestamp ~ typeInstance ~ project => {
          io.flow.delta.v0.models.ProjectVersion(
            id = id,
            timestamp = timestamp,
            `type` = typeInstance,
            project = project
          )
        }
      }
    }

  }

  object Tag {

    def parserWithPrefix(prefix: String, sep: String = "_") = parser(
      id = s"$prefix${sep}id"
    )

    def parser(
      id: String = "id"
    ): RowParser[io.flow.delta.v0.models.Tag] = {
      SqlParser.str(id) map {
        case id => {
          io.flow.delta.v0.models.Tag(
            id = id
          )
        }
      }
    }

  }

}