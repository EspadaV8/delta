{
  "name": "delta",

  "imports": [
    { "uri": "http://www.apidoc.me/flow/common/0.0.9/service.json" }
  ],

  "enums": {
    "event_type": {
      "description": "Types of events that could happen during the deployment process",
      "values": [
        { "name": "queue", "description": "Deployment in queued, but has not started." },
        { "name": "start", "description": "Deployment has started and waiting for updates" },
        { "name": "ecs_task_create", "description": "Creation new AWS ECS task definition" },
        { "name": "ecs_task", "description": "Creation of new AWS ECS service" },
        { "name": "deploy", "description": "ECS Task and Service have been set up" },
        { "name": "traffic_balance", "description": "Transferring traffic load from old task to new task" },
        { "name": "complete", "description": "All done and everything looks good!" },
        { "name": "error", "description": "Some issue occurred..." },
        { "name": "rollback_start", "description": "If a rollback was automatically initiated, this records that event" },
        { "name": "rollback_complete", "description": "Rollback has been completed. Back to the old normal." }
      ]
    }
  },

  "models": {
    "project": {
      "description": "A project represents a Dockerized service deployable via the Delta application.",
      "fields": [
        { "name": "id", "type": "string", "example": "user, splashpage" },
        { "name": "organization", "type": "io.flow.common.v0.models.organization_summary" },
        { "name": "master_sha", "type": "string", "description": "Current last commit github SHA" }
      ]
    },

    "project_form": {
      "fields": [
        { "name": "id", "type": "string" },
        { "name": "organization", "type": "string" },
        { "name": "master_sha", "type": "string" }
      ]
    },

    "project_put_form": {
      "fields": [
        { "name": "organization", "type": "string" },
        { "name": "master_sha", "type": "string" }
      ]
    },

    "project_reference": {
      "fields": [
        { "name": "id", "type": "string", "example": "play" }
      ]
    },

    "project_version": {
      "fields": [
        { "name": "id", "type": "string" },
        { "name": "timestamp", "type": "date-time-iso8601" },
        { "name": "type", "type": "io.flow.common.v0.enums.change_type" },
        { "name": "project", "type": "project" }
      ]
    },

    "tag": {
      "description": "Github repository tag.",
      "fields": [
        { "name": "id", "type": "string", "example": "0.0.5, 0.7.2-dev" }
      ]
    },

    "image": {
      "description": "An image represents a tagged Docker Hub image.",
      "fields": [
        { "name": "id", "type": "string", "example": "flowcommerce/user:0.3.1, gilt/stuff:latest" }
      ]
    },

    "deployment": {
      "description": "Represents a deployment of an image to production",
      "fields": [
        { "name": "id", "type": "string", "description": "Generated ID" },
        { "name": "image", "type": "image", "description": "The subject docker image of this deployment" },
        { "name": "user", "type": "io.flow.common.v0.models.user", "description": "User that created the deployment" },
        { "name": "events", "type": "[event]", "description": "List of events associated with this deployment" }
      ]
    },

    "event": {
      "description": "Discrete individual events related to a deployment.",
      "fields": [
        { "name": "id", "type": "string", "description": "Auto-generated" },
        { "name": "type", "type": "event_type" },
        { "name": "timestamp", "type": "date-time-iso8601", "description": "Time when this event actually took place, in case of delays." },
        { "name": "message", "type": "string", "required": false, "description": "Additional information regarding this event for troubleshooting or information purposes." }
      ]
    }

  },

  "resources": {
    "io.flow.common.v0.models.healthcheck": {
      "path": "/_internal_",
      "operations": [
        {
          "method": "GET",
          "path": "/healthcheck",
          "responses": {
            "200": { "type": "io.flow.common.v0.models.healthcheck" }
          }
        }
      ]
    },

    "project": {
      "operations": [
        {
          "method": "GET",
          "description": "Provides visibility into recent changes of each object, including deletion",
          "path": "/versions",
          "parameters": [
            { "name": "id", "type": "string", "description": "Find project with this id. Exact match", "required": false },
            { "name": "ids", "type": "[string]", "description": "Filter by any one of these ids", "required": false },
            { "name": "organization", "type": "string", "description": "Filter to resolvers belongs to the organization with this key", "required": false },
            { "name": "limit", "type": "long", "default": 25, "description": "The number of records to return", "minimum": 0, "maximum": 100 },
            { "name": "offset", "type": "long", "default": 0, "description": "Used to paginate. First page of results is 0.", "minimum": 0 }
          ],
          "responses": {
            "200": { "type": "[project_version]" },
            "401": { "type": "unit" }
          }
        },
        {
          "method": "GET",
          "description": "Search projects. Results are paginated",
          "parameters": [
            { "name": "id", "type": "string", "description": "Find project with this id. Exact match", "required": false },
            { "name": "ids", "type": "[string]", "description": "Filter by any one of these ids", "required": false },
            { "name": "organization", "type": "string", "description": "Filter to resolvers belongs to the organization with this key", "required": false },
            { "name": "limit", "type": "long", "default": 25, "description": "The number of records to return", "minimum": 0, "maximum": 100 },
            { "name": "offset", "type": "long", "default": 0, "description": "Used to paginate. First page of results is 0.", "minimum": 0 }
          ],
          "responses": {
            "200": { "type": "[project]" },
            "401": { "type": "unit" }
          }
        },
        {
          "method": "GET",
          "description": "Returns information about this project.",
          "path": "/:id",
          "responses": {
            "200": { "type": "project" },
            "401": { "type": "unit" },
            "404": { "type": "unit" }
          }
        },
        {
          "method": "POST",
          "description": "Create a new project.",
          "body": { "type": "project_form" },
          "responses": {
            "201": { "type": "project" },
            "401": { "type": "unit" },
            "422": { "type": "[io.flow.common.v0.models.error]" }
          }
        },
        {
          "method": "DELETE",
          "path": "/:id",
          "responses": {
            "204": { "type": "unit" },
            "401": { "type": "unit" },
            "404": { "type": "unit" }
          }
        }
      ]
    },

    "tag": {
      "path": "/:projectId/tags",
      "operations": [
        {
          "method": "GET",
          "description": "Get a list of github tags for a project, with optional id(s)",
          "parameters": [
            { "name": "id", "type": "string", "description": "Find project with this id. Exact match", "required": false },
            { "name": "ids", "type": "[string]", "description": "Filter by any one of these ids", "required": false },
            { "name": "limit", "type": "long", "default": 25, "description": "The number of records to return", "minimum": 0, "maximum": 100 },
            { "name": "offset", "type": "long", "default": 0, "description": "Used to paginate. First page of results is 0.", "minimum": 0 }
          ],
          "responses": {
            "200": { "type": "[tag]" },
            "401": { "type": "unit" },
            "422": { "type": "[io.flow.common.v0.models.error]" }
          }
        }
      ]
    },

    "image": {
      "path": "/:projectId/images",
      "operations": [
        {
          "method": "GET",
          "description": "Get a list of docker hub images for a project, with optional id(s)",
          "parameters": [
            { "name": "id", "type": "string", "description": "Find project with this id. Exact match", "required": false },
            { "name": "ids", "type": "[string]", "description": "Filter by any one of these ids", "required": false },
            { "name": "limit", "type": "long", "default": 25, "description": "The number of records to return", "minimum": 0, "maximum": 100 },
            { "name": "offset", "type": "long", "default": 0, "description": "Used to paginate. First page of results is 0.", "minimum": 0 }
          ],
          "responses": {
            "200": { "type": "[image]" },
            "401": { "type": "unit" },
            "422": { "type": "[io.flow.common.v0.models.error]" }
          }
        }
      ]
    },

    "deployment": {
      "path": "/:projectId/deployments",
      "operations": [
        {
          "method": "GET",
          "description": "Get a list of docker hub images for a project, with optional id(s)",
          "parameters": [
            { "name": "id", "type": "string", "description": "Find project with this id. Exact match", "required": false },
            { "name": "ids", "type": "[string]", "description": "Filter by any one of these ids", "required": false },
            { "name": "limit", "type": "long", "default": 25, "description": "The number of records to return", "minimum": 0, "maximum": 100 },
            { "name": "offset", "type": "long", "default": 0, "description": "Used to paginate. First page of results is 0.", "minimum": 0 }
          ],
          "responses": {
            "200": { "type": "[deployment]" },
            "401": { "type": "unit" },
            "422": { "type": "[io.flow.common.v0.models.error]" }
          }
        },
        {
          "method": "GET",
          "path": "/:id",
          "description": "Get information about a specific deployment for this project",
          "responses": {
            "200": { "type": "deployment" },
            "401": { "type": "unit" },
            "404": { "type": "unit" }
          }
        }
      ]
    }
  }

}
