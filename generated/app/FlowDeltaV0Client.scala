/**
 * Generated by apidoc - http://www.apidoc.me
 * Service version: 0.0.3
 * apidoc:0.11.8 http://www.apidoc.me/flow/delta/0.0.3/play_2_4_client
 */
package io.flow.delta.v0.models {

  sealed trait ItemSummary

  /**
   * Used to authenticate user based on the oauth code we receive from github
   */
  case class GithubAuthenticationForm(
    code: String
  )

  case class GithubUser(
    id: String,
    user: io.flow.delta.v0.models.Reference,
    githubUserId: Long,
    login: String
  )

  case class GithubUserForm(
    userId: String,
    githubUserId: Long,
    login: String
  )

  /**
   * Defines a github hook
   */
  case class GithubWebhook(
    id: Long
  )

  case class Image(
    id: String,
    project: io.flow.delta.v0.models.ProjectSummary,
    name: String,
    version: String
  )

  case class ImageForm(
    projectId: String,
    name: String,
    version: String
  )

  /**
   * A denormalization of item content for search
   */
  case class Item(
    id: String,
    organization: io.flow.delta.v0.models.OrganizationSummary,
    visibility: io.flow.delta.v0.models.Visibility,
    summary: io.flow.delta.v0.models.ItemSummary,
    label: String,
    description: _root_.scala.Option[String] = None
  )

  /**
   * A user can belong to one or more organizations via memberships.
   */
  case class Membership(
    id: String,
    user: io.flow.delta.v0.models.UserSummary,
    organization: io.flow.delta.v0.models.OrganizationSummary,
    role: io.flow.delta.v0.models.Role
  )

  case class MembershipForm(
    userId: String,
    organization: String,
    role: io.flow.delta.v0.models.Role = io.flow.delta.v0.models.Role("member")
  )

  case class Organization(
    id: String,
    user: io.flow.delta.v0.models.UserSummary
  )

  case class OrganizationForm(
    id: String
  )

  case class OrganizationSummary(
    id: String
  )

  case class Project(
    id: String,
    organization: io.flow.delta.v0.models.OrganizationSummary,
    user: io.flow.delta.v0.models.Reference,
    visibility: io.flow.delta.v0.models.Visibility,
    scms: io.flow.delta.v0.models.Scms,
    name: String,
    uri: String
  )

  case class ProjectForm(
    organization: String,
    name: String,
    visibility: io.flow.delta.v0.models.Visibility,
    scms: io.flow.delta.v0.models.Scms,
    uri: String
  )

  /**
   * Returns the latest expected and actual states for this project
   */
  case class ProjectState(
    expected: _root_.scala.Option[io.flow.delta.v0.models.State] = None,
    actual: _root_.scala.Option[io.flow.delta.v0.models.State] = None
  )

  case class ProjectSummary(
    id: String,
    organization: io.flow.delta.v0.models.OrganizationSummary,
    name: String,
    uri: String
  ) extends ItemSummary

  case class Reference(
    id: String
  )

  case class Repository(
    name: String,
    visibility: io.flow.delta.v0.models.Visibility,
    uri: String
  )

  /**
   * Used to describe the actual state of a project in AWS. Specifically which
   * versions are running
   */
  case class State(
    timestamp: _root_.org.joda.time.DateTime,
    versions: Seq[io.flow.delta.v0.models.Version]
  )

  case class StateForm(
    versions: Seq[io.flow.delta.v0.models.Version]
  )

  /**
   * Represents a user that is currently subscribed to a publication
   */
  case class Subscription(
    id: String,
    user: io.flow.delta.v0.models.Reference,
    publication: io.flow.delta.v0.models.Publication
  )

  case class SubscriptionForm(
    userId: String,
    publication: io.flow.delta.v0.models.Publication
  )

  case class Token(
    id: String,
    user: io.flow.delta.v0.models.Reference,
    masked: String,
    cleartext: _root_.scala.Option[String] = None,
    description: _root_.scala.Option[String] = None
  )

  case class TokenForm(
    userId: String,
    description: _root_.scala.Option[String] = None
  )

  case class UserForm(
    email: _root_.scala.Option[String] = None,
    name: _root_.scala.Option[io.flow.common.v0.models.Name] = None
  )

  case class UserIdentifier(
    id: String,
    user: io.flow.delta.v0.models.Reference,
    value: String
  )

  case class UserSummary(
    id: String,
    email: _root_.scala.Option[String] = None,
    name: io.flow.common.v0.models.Name
  )

  case class UsernamePassword(
    username: String,
    password: _root_.scala.Option[String] = None
  )

  case class Version(
    name: String,
    instances: Long
  )

  /**
   * Provides future compatibility in clients - in the future, when a type is added
   * to the union ItemSummary, it will need to be handled in the client code. This
   * implementation will deserialize these future types as an instance of this class.
   */
  case class ItemSummaryUndefinedType(
    description: String
  ) extends ItemSummary

  /**
   * A publication represents something that a user can subscribe to.
   */
  sealed trait Publication

  object Publication {

    /**
     * Get notified of all deployments
     */
    case object Deployments extends Publication { override def toString = "deployments" }

    /**
     * UNDEFINED captures values that are sent either in error or
     * that were added by the server after this library was
     * generated. We want to make it easy and obvious for users of
     * this library to handle this case gracefully.
     *
     * We use all CAPS for the variable name to avoid collisions
     * with the camel cased values above.
     */
    case class UNDEFINED(override val toString: String) extends Publication

    /**
     * all returns a list of all the valid, known values. We use
     * lower case to avoid collisions with the camel cased values
     * above.
     */
    val all = Seq(Deployments)

    private[this]
    val byName = all.map(x => x.toString.toLowerCase -> x).toMap

    def apply(value: String): Publication = fromString(value).getOrElse(UNDEFINED(value))

    def fromString(value: String): _root_.scala.Option[Publication] = byName.get(value.toLowerCase)

  }

  sealed trait Role

  object Role {

    case object Member extends Role { override def toString = "member" }
    case object Admin extends Role { override def toString = "admin" }

    /**
     * UNDEFINED captures values that are sent either in error or
     * that were added by the server after this library was
     * generated. We want to make it easy and obvious for users of
     * this library to handle this case gracefully.
     *
     * We use all CAPS for the variable name to avoid collisions
     * with the camel cased values above.
     */
    case class UNDEFINED(override val toString: String) extends Role

    /**
     * all returns a list of all the valid, known values. We use
     * lower case to avoid collisions with the camel cased values
     * above.
     */
    val all = Seq(Member, Admin)

    private[this]
    val byName = all.map(x => x.toString.toLowerCase -> x).toMap

    def apply(value: String): Role = fromString(value).getOrElse(UNDEFINED(value))

    def fromString(value: String): _root_.scala.Option[Role] = byName.get(value.toLowerCase)

  }

  sealed trait Scms

  object Scms {

    case object Github extends Scms { override def toString = "github" }

    /**
     * UNDEFINED captures values that are sent either in error or
     * that were added by the server after this library was
     * generated. We want to make it easy and obvious for users of
     * this library to handle this case gracefully.
     *
     * We use all CAPS for the variable name to avoid collisions
     * with the camel cased values above.
     */
    case class UNDEFINED(override val toString: String) extends Scms

    /**
     * all returns a list of all the valid, known values. We use
     * lower case to avoid collisions with the camel cased values
     * above.
     */
    val all = Seq(Github)

    private[this]
    val byName = all.map(x => x.toString.toLowerCase -> x).toMap

    def apply(value: String): Scms = fromString(value).getOrElse(UNDEFINED(value))

    def fromString(value: String): _root_.scala.Option[Scms] = byName.get(value.toLowerCase)

  }

  sealed trait Visibility

  object Visibility {

    case object Public extends Visibility { override def toString = "public" }
    case object Private extends Visibility { override def toString = "private" }

    /**
     * UNDEFINED captures values that are sent either in error or
     * that were added by the server after this library was
     * generated. We want to make it easy and obvious for users of
     * this library to handle this case gracefully.
     *
     * We use all CAPS for the variable name to avoid collisions
     * with the camel cased values above.
     */
    case class UNDEFINED(override val toString: String) extends Visibility

    /**
     * all returns a list of all the valid, known values. We use
     * lower case to avoid collisions with the camel cased values
     * above.
     */
    val all = Seq(Public, Private)

    private[this]
    val byName = all.map(x => x.toString.toLowerCase -> x).toMap

    def apply(value: String): Visibility = fromString(value).getOrElse(UNDEFINED(value))

    def fromString(value: String): _root_.scala.Option[Visibility] = byName.get(value.toLowerCase)

  }

}

package io.flow.delta.v0.models {

  package object json {
    import play.api.libs.json.__
    import play.api.libs.json.JsString
    import play.api.libs.json.Writes
    import play.api.libs.functional.syntax._
    import io.flow.common.v0.models.json._
    import io.flow.delta.v0.models.json._

    private[v0] implicit val jsonReadsUUID = __.read[String].map(java.util.UUID.fromString)

    private[v0] implicit val jsonWritesUUID = new Writes[java.util.UUID] {
      def writes(x: java.util.UUID) = JsString(x.toString)
    }

    private[v0] implicit val jsonReadsJodaDateTime = __.read[String].map { str =>
      import org.joda.time.format.ISODateTimeFormat.dateTimeParser
      dateTimeParser.parseDateTime(str)
    }

    private[v0] implicit val jsonWritesJodaDateTime = new Writes[org.joda.time.DateTime] {
      def writes(x: org.joda.time.DateTime) = {
        import org.joda.time.format.ISODateTimeFormat.dateTime
        val str = dateTime.print(x)
        JsString(str)
      }
    }

    implicit val jsonReadsDeltaPublication = new play.api.libs.json.Reads[io.flow.delta.v0.models.Publication] {
      def reads(js: play.api.libs.json.JsValue): play.api.libs.json.JsResult[io.flow.delta.v0.models.Publication] = {
        js match {
          case v: play.api.libs.json.JsString => play.api.libs.json.JsSuccess(io.flow.delta.v0.models.Publication(v.value))
          case _ => {
            (js \ "value").validate[String] match {
              case play.api.libs.json.JsSuccess(v, _) => play.api.libs.json.JsSuccess(io.flow.delta.v0.models.Publication(v))
              case err: play.api.libs.json.JsError => err
            }
          }
        }
      }
    }

    def jsonWritesDeltaPublication(obj: io.flow.delta.v0.models.Publication) = {
      play.api.libs.json.JsString(obj.toString)
    }

    def jsObjectPublication(obj: io.flow.delta.v0.models.Publication) = {
      play.api.libs.json.Json.obj("value" -> play.api.libs.json.JsString(obj.toString))
    }

    implicit def jsonWritesDeltaPublication: play.api.libs.json.Writes[Publication] = {
      new play.api.libs.json.Writes[io.flow.delta.v0.models.Publication] {
        def writes(obj: io.flow.delta.v0.models.Publication) = {
          jsonWritesDeltaPublication(obj)
        }
      }
    }

    implicit val jsonReadsDeltaRole = new play.api.libs.json.Reads[io.flow.delta.v0.models.Role] {
      def reads(js: play.api.libs.json.JsValue): play.api.libs.json.JsResult[io.flow.delta.v0.models.Role] = {
        js match {
          case v: play.api.libs.json.JsString => play.api.libs.json.JsSuccess(io.flow.delta.v0.models.Role(v.value))
          case _ => {
            (js \ "value").validate[String] match {
              case play.api.libs.json.JsSuccess(v, _) => play.api.libs.json.JsSuccess(io.flow.delta.v0.models.Role(v))
              case err: play.api.libs.json.JsError => err
            }
          }
        }
      }
    }

    def jsonWritesDeltaRole(obj: io.flow.delta.v0.models.Role) = {
      play.api.libs.json.JsString(obj.toString)
    }

    def jsObjectRole(obj: io.flow.delta.v0.models.Role) = {
      play.api.libs.json.Json.obj("value" -> play.api.libs.json.JsString(obj.toString))
    }

    implicit def jsonWritesDeltaRole: play.api.libs.json.Writes[Role] = {
      new play.api.libs.json.Writes[io.flow.delta.v0.models.Role] {
        def writes(obj: io.flow.delta.v0.models.Role) = {
          jsonWritesDeltaRole(obj)
        }
      }
    }

    implicit val jsonReadsDeltaScms = new play.api.libs.json.Reads[io.flow.delta.v0.models.Scms] {
      def reads(js: play.api.libs.json.JsValue): play.api.libs.json.JsResult[io.flow.delta.v0.models.Scms] = {
        js match {
          case v: play.api.libs.json.JsString => play.api.libs.json.JsSuccess(io.flow.delta.v0.models.Scms(v.value))
          case _ => {
            (js \ "value").validate[String] match {
              case play.api.libs.json.JsSuccess(v, _) => play.api.libs.json.JsSuccess(io.flow.delta.v0.models.Scms(v))
              case err: play.api.libs.json.JsError => err
            }
          }
        }
      }
    }

    def jsonWritesDeltaScms(obj: io.flow.delta.v0.models.Scms) = {
      play.api.libs.json.JsString(obj.toString)
    }

    def jsObjectScms(obj: io.flow.delta.v0.models.Scms) = {
      play.api.libs.json.Json.obj("value" -> play.api.libs.json.JsString(obj.toString))
    }

    implicit def jsonWritesDeltaScms: play.api.libs.json.Writes[Scms] = {
      new play.api.libs.json.Writes[io.flow.delta.v0.models.Scms] {
        def writes(obj: io.flow.delta.v0.models.Scms) = {
          jsonWritesDeltaScms(obj)
        }
      }
    }

    implicit val jsonReadsDeltaVisibility = new play.api.libs.json.Reads[io.flow.delta.v0.models.Visibility] {
      def reads(js: play.api.libs.json.JsValue): play.api.libs.json.JsResult[io.flow.delta.v0.models.Visibility] = {
        js match {
          case v: play.api.libs.json.JsString => play.api.libs.json.JsSuccess(io.flow.delta.v0.models.Visibility(v.value))
          case _ => {
            (js \ "value").validate[String] match {
              case play.api.libs.json.JsSuccess(v, _) => play.api.libs.json.JsSuccess(io.flow.delta.v0.models.Visibility(v))
              case err: play.api.libs.json.JsError => err
            }
          }
        }
      }
    }

    def jsonWritesDeltaVisibility(obj: io.flow.delta.v0.models.Visibility) = {
      play.api.libs.json.JsString(obj.toString)
    }

    def jsObjectVisibility(obj: io.flow.delta.v0.models.Visibility) = {
      play.api.libs.json.Json.obj("value" -> play.api.libs.json.JsString(obj.toString))
    }

    implicit def jsonWritesDeltaVisibility: play.api.libs.json.Writes[Visibility] = {
      new play.api.libs.json.Writes[io.flow.delta.v0.models.Visibility] {
        def writes(obj: io.flow.delta.v0.models.Visibility) = {
          jsonWritesDeltaVisibility(obj)
        }
      }
    }

    implicit def jsonReadsDeltaGithubAuthenticationForm: play.api.libs.json.Reads[GithubAuthenticationForm] = {
      (__ \ "code").read[String].map { x => new GithubAuthenticationForm(code = x) }
    }

    def jsObjectGithubAuthenticationForm(obj: io.flow.delta.v0.models.GithubAuthenticationForm) = {
      play.api.libs.json.Json.obj(
        "code" -> play.api.libs.json.JsString(obj.code)
      )
    }

    implicit def jsonWritesDeltaGithubAuthenticationForm: play.api.libs.json.Writes[GithubAuthenticationForm] = {
      new play.api.libs.json.Writes[io.flow.delta.v0.models.GithubAuthenticationForm] {
        def writes(obj: io.flow.delta.v0.models.GithubAuthenticationForm) = {
          jsObjectGithubAuthenticationForm(obj)
        }
      }
    }

    implicit def jsonReadsDeltaGithubUser: play.api.libs.json.Reads[GithubUser] = {
      (
        (__ \ "id").read[String] and
        (__ \ "user").read[io.flow.delta.v0.models.Reference] and
        (__ \ "github_user_id").read[Long] and
        (__ \ "login").read[String]
      )(GithubUser.apply _)
    }

    def jsObjectGithubUser(obj: io.flow.delta.v0.models.GithubUser) = {
      play.api.libs.json.Json.obj(
        "id" -> play.api.libs.json.JsString(obj.id),
        "user" -> jsObjectReference(obj.user),
        "github_user_id" -> play.api.libs.json.JsNumber(obj.githubUserId),
        "login" -> play.api.libs.json.JsString(obj.login)
      )
    }

    implicit def jsonWritesDeltaGithubUser: play.api.libs.json.Writes[GithubUser] = {
      new play.api.libs.json.Writes[io.flow.delta.v0.models.GithubUser] {
        def writes(obj: io.flow.delta.v0.models.GithubUser) = {
          jsObjectGithubUser(obj)
        }
      }
    }

    implicit def jsonReadsDeltaGithubUserForm: play.api.libs.json.Reads[GithubUserForm] = {
      (
        (__ \ "user_id").read[String] and
        (__ \ "github_user_id").read[Long] and
        (__ \ "login").read[String]
      )(GithubUserForm.apply _)
    }

    def jsObjectGithubUserForm(obj: io.flow.delta.v0.models.GithubUserForm) = {
      play.api.libs.json.Json.obj(
        "user_id" -> play.api.libs.json.JsString(obj.userId),
        "github_user_id" -> play.api.libs.json.JsNumber(obj.githubUserId),
        "login" -> play.api.libs.json.JsString(obj.login)
      )
    }

    implicit def jsonWritesDeltaGithubUserForm: play.api.libs.json.Writes[GithubUserForm] = {
      new play.api.libs.json.Writes[io.flow.delta.v0.models.GithubUserForm] {
        def writes(obj: io.flow.delta.v0.models.GithubUserForm) = {
          jsObjectGithubUserForm(obj)
        }
      }
    }

    implicit def jsonReadsDeltaGithubWebhook: play.api.libs.json.Reads[GithubWebhook] = {
      (__ \ "id").read[Long].map { x => new GithubWebhook(id = x) }
    }

    def jsObjectGithubWebhook(obj: io.flow.delta.v0.models.GithubWebhook) = {
      play.api.libs.json.Json.obj(
        "id" -> play.api.libs.json.JsNumber(obj.id)
      )
    }

    implicit def jsonWritesDeltaGithubWebhook: play.api.libs.json.Writes[GithubWebhook] = {
      new play.api.libs.json.Writes[io.flow.delta.v0.models.GithubWebhook] {
        def writes(obj: io.flow.delta.v0.models.GithubWebhook) = {
          jsObjectGithubWebhook(obj)
        }
      }
    }

    implicit def jsonReadsDeltaImage: play.api.libs.json.Reads[Image] = {
      (
        (__ \ "id").read[String] and
        (__ \ "project").read[io.flow.delta.v0.models.ProjectSummary] and
        (__ \ "name").read[String] and
        (__ \ "version").read[String]
      )(Image.apply _)
    }

    def jsObjectImage(obj: io.flow.delta.v0.models.Image) = {
      play.api.libs.json.Json.obj(
        "id" -> play.api.libs.json.JsString(obj.id),
        "project" -> jsObjectProjectSummary(obj.project),
        "name" -> play.api.libs.json.JsString(obj.name),
        "version" -> play.api.libs.json.JsString(obj.version)
      )
    }

    implicit def jsonWritesDeltaImage: play.api.libs.json.Writes[Image] = {
      new play.api.libs.json.Writes[io.flow.delta.v0.models.Image] {
        def writes(obj: io.flow.delta.v0.models.Image) = {
          jsObjectImage(obj)
        }
      }
    }

    implicit def jsonReadsDeltaImageForm: play.api.libs.json.Reads[ImageForm] = {
      (
        (__ \ "project_id").read[String] and
        (__ \ "name").read[String] and
        (__ \ "version").read[String]
      )(ImageForm.apply _)
    }

    def jsObjectImageForm(obj: io.flow.delta.v0.models.ImageForm) = {
      play.api.libs.json.Json.obj(
        "project_id" -> play.api.libs.json.JsString(obj.projectId),
        "name" -> play.api.libs.json.JsString(obj.name),
        "version" -> play.api.libs.json.JsString(obj.version)
      )
    }

    implicit def jsonWritesDeltaImageForm: play.api.libs.json.Writes[ImageForm] = {
      new play.api.libs.json.Writes[io.flow.delta.v0.models.ImageForm] {
        def writes(obj: io.flow.delta.v0.models.ImageForm) = {
          jsObjectImageForm(obj)
        }
      }
    }

    implicit def jsonReadsDeltaItem: play.api.libs.json.Reads[Item] = {
      (
        (__ \ "id").read[String] and
        (__ \ "organization").read[io.flow.delta.v0.models.OrganizationSummary] and
        (__ \ "visibility").read[io.flow.delta.v0.models.Visibility] and
        (__ \ "summary").read[io.flow.delta.v0.models.ItemSummary] and
        (__ \ "label").read[String] and
        (__ \ "description").readNullable[String]
      )(Item.apply _)
    }

    def jsObjectItem(obj: io.flow.delta.v0.models.Item) = {
      play.api.libs.json.Json.obj(
        "id" -> play.api.libs.json.JsString(obj.id),
        "organization" -> jsObjectOrganizationSummary(obj.organization),
        "visibility" -> play.api.libs.json.JsString(obj.visibility.toString),
        "summary" -> jsObjectItemSummary(obj.summary),
        "label" -> play.api.libs.json.JsString(obj.label)
      ) ++ (obj.description match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("description" -> play.api.libs.json.JsString(x))
      })
    }

    implicit def jsonWritesDeltaItem: play.api.libs.json.Writes[Item] = {
      new play.api.libs.json.Writes[io.flow.delta.v0.models.Item] {
        def writes(obj: io.flow.delta.v0.models.Item) = {
          jsObjectItem(obj)
        }
      }
    }

    implicit def jsonReadsDeltaMembership: play.api.libs.json.Reads[Membership] = {
      (
        (__ \ "id").read[String] and
        (__ \ "user").read[io.flow.delta.v0.models.UserSummary] and
        (__ \ "organization").read[io.flow.delta.v0.models.OrganizationSummary] and
        (__ \ "role").read[io.flow.delta.v0.models.Role]
      )(Membership.apply _)
    }

    def jsObjectMembership(obj: io.flow.delta.v0.models.Membership) = {
      play.api.libs.json.Json.obj(
        "id" -> play.api.libs.json.JsString(obj.id),
        "user" -> jsObjectUserSummary(obj.user),
        "organization" -> jsObjectOrganizationSummary(obj.organization),
        "role" -> play.api.libs.json.JsString(obj.role.toString)
      )
    }

    implicit def jsonWritesDeltaMembership: play.api.libs.json.Writes[Membership] = {
      new play.api.libs.json.Writes[io.flow.delta.v0.models.Membership] {
        def writes(obj: io.flow.delta.v0.models.Membership) = {
          jsObjectMembership(obj)
        }
      }
    }

    implicit def jsonReadsDeltaMembershipForm: play.api.libs.json.Reads[MembershipForm] = {
      (
        (__ \ "user_id").read[String] and
        (__ \ "organization").read[String] and
        (__ \ "role").read[io.flow.delta.v0.models.Role]
      )(MembershipForm.apply _)
    }

    def jsObjectMembershipForm(obj: io.flow.delta.v0.models.MembershipForm) = {
      play.api.libs.json.Json.obj(
        "user_id" -> play.api.libs.json.JsString(obj.userId),
        "organization" -> play.api.libs.json.JsString(obj.organization),
        "role" -> play.api.libs.json.JsString(obj.role.toString)
      )
    }

    implicit def jsonWritesDeltaMembershipForm: play.api.libs.json.Writes[MembershipForm] = {
      new play.api.libs.json.Writes[io.flow.delta.v0.models.MembershipForm] {
        def writes(obj: io.flow.delta.v0.models.MembershipForm) = {
          jsObjectMembershipForm(obj)
        }
      }
    }

    implicit def jsonReadsDeltaOrganization: play.api.libs.json.Reads[Organization] = {
      (
        (__ \ "id").read[String] and
        (__ \ "user").read[io.flow.delta.v0.models.UserSummary]
      )(Organization.apply _)
    }

    def jsObjectOrganization(obj: io.flow.delta.v0.models.Organization) = {
      play.api.libs.json.Json.obj(
        "id" -> play.api.libs.json.JsString(obj.id),
        "user" -> jsObjectUserSummary(obj.user)
      )
    }

    implicit def jsonWritesDeltaOrganization: play.api.libs.json.Writes[Organization] = {
      new play.api.libs.json.Writes[io.flow.delta.v0.models.Organization] {
        def writes(obj: io.flow.delta.v0.models.Organization) = {
          jsObjectOrganization(obj)
        }
      }
    }

    implicit def jsonReadsDeltaOrganizationForm: play.api.libs.json.Reads[OrganizationForm] = {
      (__ \ "id").read[String].map { x => new OrganizationForm(id = x) }
    }

    def jsObjectOrganizationForm(obj: io.flow.delta.v0.models.OrganizationForm) = {
      play.api.libs.json.Json.obj(
        "id" -> play.api.libs.json.JsString(obj.id)
      )
    }

    implicit def jsonWritesDeltaOrganizationForm: play.api.libs.json.Writes[OrganizationForm] = {
      new play.api.libs.json.Writes[io.flow.delta.v0.models.OrganizationForm] {
        def writes(obj: io.flow.delta.v0.models.OrganizationForm) = {
          jsObjectOrganizationForm(obj)
        }
      }
    }

    implicit def jsonReadsDeltaOrganizationSummary: play.api.libs.json.Reads[OrganizationSummary] = {
      (__ \ "id").read[String].map { x => new OrganizationSummary(id = x) }
    }

    def jsObjectOrganizationSummary(obj: io.flow.delta.v0.models.OrganizationSummary) = {
      play.api.libs.json.Json.obj(
        "id" -> play.api.libs.json.JsString(obj.id)
      )
    }

    implicit def jsonWritesDeltaOrganizationSummary: play.api.libs.json.Writes[OrganizationSummary] = {
      new play.api.libs.json.Writes[io.flow.delta.v0.models.OrganizationSummary] {
        def writes(obj: io.flow.delta.v0.models.OrganizationSummary) = {
          jsObjectOrganizationSummary(obj)
        }
      }
    }

    implicit def jsonReadsDeltaProject: play.api.libs.json.Reads[Project] = {
      (
        (__ \ "id").read[String] and
        (__ \ "organization").read[io.flow.delta.v0.models.OrganizationSummary] and
        (__ \ "user").read[io.flow.delta.v0.models.Reference] and
        (__ \ "visibility").read[io.flow.delta.v0.models.Visibility] and
        (__ \ "scms").read[io.flow.delta.v0.models.Scms] and
        (__ \ "name").read[String] and
        (__ \ "uri").read[String]
      )(Project.apply _)
    }

    def jsObjectProject(obj: io.flow.delta.v0.models.Project) = {
      play.api.libs.json.Json.obj(
        "id" -> play.api.libs.json.JsString(obj.id),
        "organization" -> jsObjectOrganizationSummary(obj.organization),
        "user" -> jsObjectReference(obj.user),
        "visibility" -> play.api.libs.json.JsString(obj.visibility.toString),
        "scms" -> play.api.libs.json.JsString(obj.scms.toString),
        "name" -> play.api.libs.json.JsString(obj.name),
        "uri" -> play.api.libs.json.JsString(obj.uri)
      )
    }

    implicit def jsonWritesDeltaProject: play.api.libs.json.Writes[Project] = {
      new play.api.libs.json.Writes[io.flow.delta.v0.models.Project] {
        def writes(obj: io.flow.delta.v0.models.Project) = {
          jsObjectProject(obj)
        }
      }
    }

    implicit def jsonReadsDeltaProjectForm: play.api.libs.json.Reads[ProjectForm] = {
      (
        (__ \ "organization").read[String] and
        (__ \ "name").read[String] and
        (__ \ "visibility").read[io.flow.delta.v0.models.Visibility] and
        (__ \ "scms").read[io.flow.delta.v0.models.Scms] and
        (__ \ "uri").read[String]
      )(ProjectForm.apply _)
    }

    def jsObjectProjectForm(obj: io.flow.delta.v0.models.ProjectForm) = {
      play.api.libs.json.Json.obj(
        "organization" -> play.api.libs.json.JsString(obj.organization),
        "name" -> play.api.libs.json.JsString(obj.name),
        "visibility" -> play.api.libs.json.JsString(obj.visibility.toString),
        "scms" -> play.api.libs.json.JsString(obj.scms.toString),
        "uri" -> play.api.libs.json.JsString(obj.uri)
      )
    }

    implicit def jsonWritesDeltaProjectForm: play.api.libs.json.Writes[ProjectForm] = {
      new play.api.libs.json.Writes[io.flow.delta.v0.models.ProjectForm] {
        def writes(obj: io.flow.delta.v0.models.ProjectForm) = {
          jsObjectProjectForm(obj)
        }
      }
    }

    implicit def jsonReadsDeltaProjectState: play.api.libs.json.Reads[ProjectState] = {
      (
        (__ \ "expected").readNullable[io.flow.delta.v0.models.State] and
        (__ \ "actual").readNullable[io.flow.delta.v0.models.State]
      )(ProjectState.apply _)
    }

    def jsObjectProjectState(obj: io.flow.delta.v0.models.ProjectState) = {
      (obj.expected match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("expected" -> jsObjectState(x))
      }) ++
      (obj.actual match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("actual" -> jsObjectState(x))
      })
    }

    implicit def jsonWritesDeltaProjectState: play.api.libs.json.Writes[ProjectState] = {
      new play.api.libs.json.Writes[io.flow.delta.v0.models.ProjectState] {
        def writes(obj: io.flow.delta.v0.models.ProjectState) = {
          jsObjectProjectState(obj)
        }
      }
    }

    implicit def jsonReadsDeltaProjectSummary: play.api.libs.json.Reads[ProjectSummary] = {
      (
        (__ \ "id").read[String] and
        (__ \ "organization").read[io.flow.delta.v0.models.OrganizationSummary] and
        (__ \ "name").read[String] and
        (__ \ "uri").read[String]
      )(ProjectSummary.apply _)
    }

    def jsObjectProjectSummary(obj: io.flow.delta.v0.models.ProjectSummary) = {
      play.api.libs.json.Json.obj(
        "id" -> play.api.libs.json.JsString(obj.id),
        "organization" -> jsObjectOrganizationSummary(obj.organization),
        "name" -> play.api.libs.json.JsString(obj.name),
        "uri" -> play.api.libs.json.JsString(obj.uri)
      )
    }

    implicit def jsonReadsDeltaReference: play.api.libs.json.Reads[Reference] = {
      (__ \ "id").read[String].map { x => new Reference(id = x) }
    }

    def jsObjectReference(obj: io.flow.delta.v0.models.Reference) = {
      play.api.libs.json.Json.obj(
        "id" -> play.api.libs.json.JsString(obj.id)
      )
    }

    implicit def jsonWritesDeltaReference: play.api.libs.json.Writes[Reference] = {
      new play.api.libs.json.Writes[io.flow.delta.v0.models.Reference] {
        def writes(obj: io.flow.delta.v0.models.Reference) = {
          jsObjectReference(obj)
        }
      }
    }

    implicit def jsonReadsDeltaRepository: play.api.libs.json.Reads[Repository] = {
      (
        (__ \ "name").read[String] and
        (__ \ "visibility").read[io.flow.delta.v0.models.Visibility] and
        (__ \ "uri").read[String]
      )(Repository.apply _)
    }

    def jsObjectRepository(obj: io.flow.delta.v0.models.Repository) = {
      play.api.libs.json.Json.obj(
        "name" -> play.api.libs.json.JsString(obj.name),
        "visibility" -> play.api.libs.json.JsString(obj.visibility.toString),
        "uri" -> play.api.libs.json.JsString(obj.uri)
      )
    }

    implicit def jsonWritesDeltaRepository: play.api.libs.json.Writes[Repository] = {
      new play.api.libs.json.Writes[io.flow.delta.v0.models.Repository] {
        def writes(obj: io.flow.delta.v0.models.Repository) = {
          jsObjectRepository(obj)
        }
      }
    }

    implicit def jsonReadsDeltaState: play.api.libs.json.Reads[State] = {
      (
        (__ \ "timestamp").read[_root_.org.joda.time.DateTime] and
        (__ \ "versions").read[Seq[io.flow.delta.v0.models.Version]]
      )(State.apply _)
    }

    def jsObjectState(obj: io.flow.delta.v0.models.State) = {
      play.api.libs.json.Json.obj(
        "timestamp" -> play.api.libs.json.JsString(_root_.org.joda.time.format.ISODateTimeFormat.dateTime.print(obj.timestamp)),
        "versions" -> play.api.libs.json.Json.toJson(obj.versions)
      )
    }

    implicit def jsonWritesDeltaState: play.api.libs.json.Writes[State] = {
      new play.api.libs.json.Writes[io.flow.delta.v0.models.State] {
        def writes(obj: io.flow.delta.v0.models.State) = {
          jsObjectState(obj)
        }
      }
    }

    implicit def jsonReadsDeltaStateForm: play.api.libs.json.Reads[StateForm] = {
      (__ \ "versions").read[Seq[io.flow.delta.v0.models.Version]].map { x => new StateForm(versions = x) }
    }

    def jsObjectStateForm(obj: io.flow.delta.v0.models.StateForm) = {
      play.api.libs.json.Json.obj(
        "versions" -> play.api.libs.json.Json.toJson(obj.versions)
      )
    }

    implicit def jsonWritesDeltaStateForm: play.api.libs.json.Writes[StateForm] = {
      new play.api.libs.json.Writes[io.flow.delta.v0.models.StateForm] {
        def writes(obj: io.flow.delta.v0.models.StateForm) = {
          jsObjectStateForm(obj)
        }
      }
    }

    implicit def jsonReadsDeltaSubscription: play.api.libs.json.Reads[Subscription] = {
      (
        (__ \ "id").read[String] and
        (__ \ "user").read[io.flow.delta.v0.models.Reference] and
        (__ \ "publication").read[io.flow.delta.v0.models.Publication]
      )(Subscription.apply _)
    }

    def jsObjectSubscription(obj: io.flow.delta.v0.models.Subscription) = {
      play.api.libs.json.Json.obj(
        "id" -> play.api.libs.json.JsString(obj.id),
        "user" -> jsObjectReference(obj.user),
        "publication" -> play.api.libs.json.JsString(obj.publication.toString)
      )
    }

    implicit def jsonWritesDeltaSubscription: play.api.libs.json.Writes[Subscription] = {
      new play.api.libs.json.Writes[io.flow.delta.v0.models.Subscription] {
        def writes(obj: io.flow.delta.v0.models.Subscription) = {
          jsObjectSubscription(obj)
        }
      }
    }

    implicit def jsonReadsDeltaSubscriptionForm: play.api.libs.json.Reads[SubscriptionForm] = {
      (
        (__ \ "user_id").read[String] and
        (__ \ "publication").read[io.flow.delta.v0.models.Publication]
      )(SubscriptionForm.apply _)
    }

    def jsObjectSubscriptionForm(obj: io.flow.delta.v0.models.SubscriptionForm) = {
      play.api.libs.json.Json.obj(
        "user_id" -> play.api.libs.json.JsString(obj.userId),
        "publication" -> play.api.libs.json.JsString(obj.publication.toString)
      )
    }

    implicit def jsonWritesDeltaSubscriptionForm: play.api.libs.json.Writes[SubscriptionForm] = {
      new play.api.libs.json.Writes[io.flow.delta.v0.models.SubscriptionForm] {
        def writes(obj: io.flow.delta.v0.models.SubscriptionForm) = {
          jsObjectSubscriptionForm(obj)
        }
      }
    }

    implicit def jsonReadsDeltaToken: play.api.libs.json.Reads[Token] = {
      (
        (__ \ "id").read[String] and
        (__ \ "user").read[io.flow.delta.v0.models.Reference] and
        (__ \ "masked").read[String] and
        (__ \ "cleartext").readNullable[String] and
        (__ \ "description").readNullable[String]
      )(Token.apply _)
    }

    def jsObjectToken(obj: io.flow.delta.v0.models.Token) = {
      play.api.libs.json.Json.obj(
        "id" -> play.api.libs.json.JsString(obj.id),
        "user" -> jsObjectReference(obj.user),
        "masked" -> play.api.libs.json.JsString(obj.masked)
      ) ++ (obj.cleartext match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("cleartext" -> play.api.libs.json.JsString(x))
      }) ++
      (obj.description match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("description" -> play.api.libs.json.JsString(x))
      })
    }

    implicit def jsonWritesDeltaToken: play.api.libs.json.Writes[Token] = {
      new play.api.libs.json.Writes[io.flow.delta.v0.models.Token] {
        def writes(obj: io.flow.delta.v0.models.Token) = {
          jsObjectToken(obj)
        }
      }
    }

    implicit def jsonReadsDeltaTokenForm: play.api.libs.json.Reads[TokenForm] = {
      (
        (__ \ "user_id").read[String] and
        (__ \ "description").readNullable[String]
      )(TokenForm.apply _)
    }

    def jsObjectTokenForm(obj: io.flow.delta.v0.models.TokenForm) = {
      play.api.libs.json.Json.obj(
        "user_id" -> play.api.libs.json.JsString(obj.userId)
      ) ++ (obj.description match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("description" -> play.api.libs.json.JsString(x))
      })
    }

    implicit def jsonWritesDeltaTokenForm: play.api.libs.json.Writes[TokenForm] = {
      new play.api.libs.json.Writes[io.flow.delta.v0.models.TokenForm] {
        def writes(obj: io.flow.delta.v0.models.TokenForm) = {
          jsObjectTokenForm(obj)
        }
      }
    }

    implicit def jsonReadsDeltaUserForm: play.api.libs.json.Reads[UserForm] = {
      (
        (__ \ "email").readNullable[String] and
        (__ \ "name").readNullable[io.flow.common.v0.models.Name]
      )(UserForm.apply _)
    }

    def jsObjectUserForm(obj: io.flow.delta.v0.models.UserForm) = {
      (obj.email match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("email" -> play.api.libs.json.JsString(x))
      }) ++
      (obj.name match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("name" -> io.flow.common.v0.models.json.jsObjectName(x))
      })
    }

    implicit def jsonWritesDeltaUserForm: play.api.libs.json.Writes[UserForm] = {
      new play.api.libs.json.Writes[io.flow.delta.v0.models.UserForm] {
        def writes(obj: io.flow.delta.v0.models.UserForm) = {
          jsObjectUserForm(obj)
        }
      }
    }

    implicit def jsonReadsDeltaUserIdentifier: play.api.libs.json.Reads[UserIdentifier] = {
      (
        (__ \ "id").read[String] and
        (__ \ "user").read[io.flow.delta.v0.models.Reference] and
        (__ \ "value").read[String]
      )(UserIdentifier.apply _)
    }

    def jsObjectUserIdentifier(obj: io.flow.delta.v0.models.UserIdentifier) = {
      play.api.libs.json.Json.obj(
        "id" -> play.api.libs.json.JsString(obj.id),
        "user" -> jsObjectReference(obj.user),
        "value" -> play.api.libs.json.JsString(obj.value)
      )
    }

    implicit def jsonWritesDeltaUserIdentifier: play.api.libs.json.Writes[UserIdentifier] = {
      new play.api.libs.json.Writes[io.flow.delta.v0.models.UserIdentifier] {
        def writes(obj: io.flow.delta.v0.models.UserIdentifier) = {
          jsObjectUserIdentifier(obj)
        }
      }
    }

    implicit def jsonReadsDeltaUserSummary: play.api.libs.json.Reads[UserSummary] = {
      (
        (__ \ "id").read[String] and
        (__ \ "email").readNullable[String] and
        (__ \ "name").read[io.flow.common.v0.models.Name]
      )(UserSummary.apply _)
    }

    def jsObjectUserSummary(obj: io.flow.delta.v0.models.UserSummary) = {
      play.api.libs.json.Json.obj(
        "id" -> play.api.libs.json.JsString(obj.id),
        "name" -> io.flow.common.v0.models.json.jsObjectName(obj.name)
      ) ++ (obj.email match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("email" -> play.api.libs.json.JsString(x))
      })
    }

    implicit def jsonWritesDeltaUserSummary: play.api.libs.json.Writes[UserSummary] = {
      new play.api.libs.json.Writes[io.flow.delta.v0.models.UserSummary] {
        def writes(obj: io.flow.delta.v0.models.UserSummary) = {
          jsObjectUserSummary(obj)
        }
      }
    }

    implicit def jsonReadsDeltaUsernamePassword: play.api.libs.json.Reads[UsernamePassword] = {
      (
        (__ \ "username").read[String] and
        (__ \ "password").readNullable[String]
      )(UsernamePassword.apply _)
    }

    def jsObjectUsernamePassword(obj: io.flow.delta.v0.models.UsernamePassword) = {
      play.api.libs.json.Json.obj(
        "username" -> play.api.libs.json.JsString(obj.username)
      ) ++ (obj.password match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("password" -> play.api.libs.json.JsString(x))
      })
    }

    implicit def jsonWritesDeltaUsernamePassword: play.api.libs.json.Writes[UsernamePassword] = {
      new play.api.libs.json.Writes[io.flow.delta.v0.models.UsernamePassword] {
        def writes(obj: io.flow.delta.v0.models.UsernamePassword) = {
          jsObjectUsernamePassword(obj)
        }
      }
    }

    implicit def jsonReadsDeltaVersion: play.api.libs.json.Reads[Version] = {
      (
        (__ \ "name").read[String] and
        (__ \ "instances").read[Long]
      )(Version.apply _)
    }

    def jsObjectVersion(obj: io.flow.delta.v0.models.Version) = {
      play.api.libs.json.Json.obj(
        "name" -> play.api.libs.json.JsString(obj.name),
        "instances" -> play.api.libs.json.JsNumber(obj.instances)
      )
    }

    implicit def jsonWritesDeltaVersion: play.api.libs.json.Writes[Version] = {
      new play.api.libs.json.Writes[io.flow.delta.v0.models.Version] {
        def writes(obj: io.flow.delta.v0.models.Version) = {
          jsObjectVersion(obj)
        }
      }
    }

    implicit def jsonReadsDeltaItemSummary: play.api.libs.json.Reads[ItemSummary] = new play.api.libs.json.Reads[ItemSummary] {
      def reads(js: play.api.libs.json.JsValue): play.api.libs.json.JsResult[ItemSummary] = {
        (js \ "discriminator").validate[String] match {
          case play.api.libs.json.JsError(msg) => play.api.libs.json.JsError(msg)
          case play.api.libs.json.JsSuccess(discriminator, _) => {
            discriminator match {
              case "project_summary" => js.validate[io.flow.delta.v0.models.ProjectSummary]
              case other => play.api.libs.json.JsSuccess(io.flow.delta.v0.models.ItemSummaryUndefinedType(other))
            }
          }
        }
      }
    }

    def jsObjectItemSummary(obj: io.flow.delta.v0.models.ItemSummary) = {
      obj match {
        case x: io.flow.delta.v0.models.ProjectSummary => jsObjectProjectSummary(x) ++ play.api.libs.json.Json.obj("discriminator" -> "project_summary")
        case other => {
          sys.error(s"The type[${other.getClass.getName}] has no JSON writer")
        }
      }
    }

    implicit def jsonWritesDeltaItemSummary: play.api.libs.json.Writes[ItemSummary] = {
      new play.api.libs.json.Writes[io.flow.delta.v0.models.ItemSummary] {
        def writes(obj: io.flow.delta.v0.models.ItemSummary) = {
          jsObjectItemSummary(obj)
        }
      }
    }
  }
}

package io.flow.delta.v0 {

  object Bindables {

    import play.api.mvc.{PathBindable, QueryStringBindable}
    import org.joda.time.{DateTime, LocalDate}
    import org.joda.time.format.ISODateTimeFormat
    import io.flow.delta.v0.models._

    // Type: date-time-iso8601
    implicit val pathBindableTypeDateTimeIso8601 = new PathBindable.Parsing[org.joda.time.DateTime](
      ISODateTimeFormat.dateTimeParser.parseDateTime(_), _.toString, (key: String, e: Exception) => s"Error parsing date time $key. Example: 2014-04-29T11:56:52Z"
    )

    implicit val queryStringBindableTypeDateTimeIso8601 = new QueryStringBindable.Parsing[org.joda.time.DateTime](
      ISODateTimeFormat.dateTimeParser.parseDateTime(_), _.toString, (key: String, e: Exception) => s"Error parsing date time $key. Example: 2014-04-29T11:56:52Z"
    )

    // Type: date-iso8601
    implicit val pathBindableTypeDateIso8601 = new PathBindable.Parsing[org.joda.time.LocalDate](
      ISODateTimeFormat.yearMonthDay.parseLocalDate(_), _.toString, (key: String, e: Exception) => s"Error parsing date $key. Example: 2014-04-29"
    )

    implicit val queryStringBindableTypeDateIso8601 = new QueryStringBindable.Parsing[org.joda.time.LocalDate](
      ISODateTimeFormat.yearMonthDay.parseLocalDate(_), _.toString, (key: String, e: Exception) => s"Error parsing date $key. Example: 2014-04-29"
    )

    // Enum: Publication
    private[this] val enumPublicationNotFound = (key: String, e: Exception) => s"Unrecognized $key, should be one of ${io.flow.delta.v0.models.Publication.all.mkString(", ")}"

    implicit val pathBindableEnumPublication = new PathBindable.Parsing[io.flow.delta.v0.models.Publication] (
      Publication.fromString(_).get, _.toString, enumPublicationNotFound
    )

    implicit val queryStringBindableEnumPublication = new QueryStringBindable.Parsing[io.flow.delta.v0.models.Publication](
      Publication.fromString(_).get, _.toString, enumPublicationNotFound
    )

    // Enum: Role
    private[this] val enumRoleNotFound = (key: String, e: Exception) => s"Unrecognized $key, should be one of ${io.flow.delta.v0.models.Role.all.mkString(", ")}"

    implicit val pathBindableEnumRole = new PathBindable.Parsing[io.flow.delta.v0.models.Role] (
      Role.fromString(_).get, _.toString, enumRoleNotFound
    )

    implicit val queryStringBindableEnumRole = new QueryStringBindable.Parsing[io.flow.delta.v0.models.Role](
      Role.fromString(_).get, _.toString, enumRoleNotFound
    )

    // Enum: Scms
    private[this] val enumScmsNotFound = (key: String, e: Exception) => s"Unrecognized $key, should be one of ${io.flow.delta.v0.models.Scms.all.mkString(", ")}"

    implicit val pathBindableEnumScms = new PathBindable.Parsing[io.flow.delta.v0.models.Scms] (
      Scms.fromString(_).get, _.toString, enumScmsNotFound
    )

    implicit val queryStringBindableEnumScms = new QueryStringBindable.Parsing[io.flow.delta.v0.models.Scms](
      Scms.fromString(_).get, _.toString, enumScmsNotFound
    )

    // Enum: Visibility
    private[this] val enumVisibilityNotFound = (key: String, e: Exception) => s"Unrecognized $key, should be one of ${io.flow.delta.v0.models.Visibility.all.mkString(", ")}"

    implicit val pathBindableEnumVisibility = new PathBindable.Parsing[io.flow.delta.v0.models.Visibility] (
      Visibility.fromString(_).get, _.toString, enumVisibilityNotFound
    )

    implicit val queryStringBindableEnumVisibility = new QueryStringBindable.Parsing[io.flow.delta.v0.models.Visibility](
      Visibility.fromString(_).get, _.toString, enumVisibilityNotFound
    )

  }

}


package io.flow.delta.v0 {

  object Constants {

    val Namespace = "io.flow.delta.v0"
    val UserAgent = "apidoc:0.11.8 http://www.apidoc.me/flow/delta/0.0.3/play_2_4_client"
    val Version = "0.0.3"
    val VersionMajor = 0

  }

  class Client(
    apiUrl: String,
    auth: scala.Option[io.flow.delta.v0.Authorization] = None,
    defaultHeaders: Seq[(String, String)] = Nil
  ) extends interfaces.Client {
    import io.flow.common.v0.models.json._
    import io.flow.delta.v0.models.json._

    private[this] val logger = play.api.Logger("io.flow.delta.v0.Client")

    logger.info(s"Initializing io.flow.delta.v0.Client for url $apiUrl")

    def githubUsers: GithubUsers = GithubUsers

    def githubWebhooks: GithubWebhooks = GithubWebhooks

    def healthchecks: Healthchecks = Healthchecks

    def images: Images = Images

    def items: Items = Items

    def memberships: Memberships = Memberships

    def organizations: Organizations = Organizations

    def projects: Projects = Projects

    def repositories: Repositories = Repositories

    def subscriptions: Subscriptions = Subscriptions

    def tokens: Tokens = Tokens

    def users: Users = Users

    object GithubUsers extends GithubUsers {
      override def postGithub(
        githubAuthenticationForm: io.flow.delta.v0.models.GithubAuthenticationForm
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.common.v0.models.User] = {
        val payload = play.api.libs.json.Json.toJson(githubAuthenticationForm)

        _executeRequest("POST", s"/authentications/github", body = Some(payload)).map {
          case r if r.status == 200 => _root_.io.flow.delta.v0.Client.parseJson("io.flow.common.v0.models.User", r, _.validate[io.flow.common.v0.models.User])
          case r if r.status == 422 => throw new io.flow.delta.v0.errors.ErrorsResponse(r)
          case r => throw new io.flow.delta.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200, 422")
        }
      }
    }

    object GithubWebhooks extends GithubWebhooks {
      override def postByProjectId(
        projectId: String
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Unit] = {
        _executeRequest("POST", s"/webhooks/github/${play.utils.UriEncoding.encodePathSegment(projectId, "UTF-8")}").map {
          case r if r.status == 204 => ()
          case r => throw new io.flow.delta.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 204")
        }
      }
    }

    object Healthchecks extends Healthchecks {
      override def getHealthcheck()(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.common.v0.models.Healthcheck] = {
        _executeRequest("GET", s"/_internal_/healthcheck").map {
          case r if r.status == 200 => _root_.io.flow.delta.v0.Client.parseJson("io.flow.common.v0.models.Healthcheck", r, _.validate[io.flow.common.v0.models.Healthcheck])
          case r => throw new io.flow.delta.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200")
        }
      }
    }

    object Images extends Images {
      override def get(
        name: _root_.scala.Option[String] = None,
        limit: Long = 25,
        offset: Long = 0
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[io.flow.delta.v0.models.Image]] = {
        val queryParameters = Seq(
          name.map("name" -> _),
          Some("limit" -> limit.toString),
          Some("offset" -> offset.toString)
        ).flatten

        _executeRequest("GET", s"/images", queryParameters = queryParameters).map {
          case r if r.status == 200 => _root_.io.flow.delta.v0.Client.parseJson("Seq[io.flow.delta.v0.models.Image]", r, _.validate[Seq[io.flow.delta.v0.models.Image]])
          case r if r.status == 401 => throw new io.flow.delta.v0.errors.UnitResponse(r.status)
          case r => throw new io.flow.delta.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200, 401")
        }
      }
    }

    object Items extends Items {
      override def get(
        q: _root_.scala.Option[String] = None,
        limit: Long = 25,
        offset: Long = 0
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[io.flow.delta.v0.models.Item]] = {
        val queryParameters = Seq(
          q.map("q" -> _),
          Some("limit" -> limit.toString),
          Some("offset" -> offset.toString)
        ).flatten

        _executeRequest("GET", s"/items", queryParameters = queryParameters).map {
          case r if r.status == 200 => _root_.io.flow.delta.v0.Client.parseJson("Seq[io.flow.delta.v0.models.Item]", r, _.validate[Seq[io.flow.delta.v0.models.Item]])
          case r if r.status == 401 => throw new io.flow.delta.v0.errors.UnitResponse(r.status)
          case r => throw new io.flow.delta.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200, 401")
        }
      }
    }

    object Memberships extends Memberships {
      override def get(
        id: _root_.scala.Option[Seq[String]] = None,
        organization: _root_.scala.Option[String] = None,
        userId: _root_.scala.Option[String] = None,
        role: _root_.scala.Option[io.flow.delta.v0.models.Role] = None,
        limit: Long = 25,
        offset: Long = 0
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[io.flow.delta.v0.models.Membership]] = {
        val queryParameters = Seq(
          organization.map("organization" -> _),
          userId.map("user_id" -> _),
          role.map("role" -> _.toString),
          Some("limit" -> limit.toString),
          Some("offset" -> offset.toString)
        ).flatten ++
          id.getOrElse(Nil).map("id" -> _)

        _executeRequest("GET", s"/memberships", queryParameters = queryParameters).map {
          case r if r.status == 200 => _root_.io.flow.delta.v0.Client.parseJson("Seq[io.flow.delta.v0.models.Membership]", r, _.validate[Seq[io.flow.delta.v0.models.Membership]])
          case r if r.status == 401 => throw new io.flow.delta.v0.errors.UnitResponse(r.status)
          case r => throw new io.flow.delta.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200, 401")
        }
      }

      override def getById(
        id: String
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.delta.v0.models.Membership] = {
        _executeRequest("GET", s"/memberships/${play.utils.UriEncoding.encodePathSegment(id, "UTF-8")}").map {
          case r if r.status == 200 => _root_.io.flow.delta.v0.Client.parseJson("io.flow.delta.v0.models.Membership", r, _.validate[io.flow.delta.v0.models.Membership])
          case r if r.status == 401 => throw new io.flow.delta.v0.errors.UnitResponse(r.status)
          case r if r.status == 404 => throw new io.flow.delta.v0.errors.UnitResponse(r.status)
          case r => throw new io.flow.delta.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200, 401, 404")
        }
      }

      override def post(
        membershipForm: io.flow.delta.v0.models.MembershipForm
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.delta.v0.models.Membership] = {
        val payload = play.api.libs.json.Json.toJson(membershipForm)

        _executeRequest("POST", s"/memberships", body = Some(payload)).map {
          case r if r.status == 201 => _root_.io.flow.delta.v0.Client.parseJson("io.flow.delta.v0.models.Membership", r, _.validate[io.flow.delta.v0.models.Membership])
          case r if r.status == 401 => throw new io.flow.delta.v0.errors.UnitResponse(r.status)
          case r if r.status == 404 => throw new io.flow.delta.v0.errors.UnitResponse(r.status)
          case r if r.status == 422 => throw new io.flow.delta.v0.errors.ErrorsResponse(r)
          case r => throw new io.flow.delta.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 201, 401, 404, 422")
        }
      }

      override def deleteById(
        id: String
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Unit] = {
        _executeRequest("DELETE", s"/memberships/${play.utils.UriEncoding.encodePathSegment(id, "UTF-8")}").map {
          case r if r.status == 204 => ()
          case r if r.status == 401 => throw new io.flow.delta.v0.errors.UnitResponse(r.status)
          case r if r.status == 404 => throw new io.flow.delta.v0.errors.UnitResponse(r.status)
          case r => throw new io.flow.delta.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 204, 401, 404")
        }
      }
    }

    object Organizations extends Organizations {
      override def get(
        id: _root_.scala.Option[Seq[String]] = None,
        userId: _root_.scala.Option[String] = None,
        limit: Long = 25,
        offset: Long = 0
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[io.flow.delta.v0.models.Organization]] = {
        val queryParameters = Seq(
          userId.map("user_id" -> _),
          Some("limit" -> limit.toString),
          Some("offset" -> offset.toString)
        ).flatten ++
          id.getOrElse(Nil).map("id" -> _)

        _executeRequest("GET", s"/organizations", queryParameters = queryParameters).map {
          case r if r.status == 200 => _root_.io.flow.delta.v0.Client.parseJson("Seq[io.flow.delta.v0.models.Organization]", r, _.validate[Seq[io.flow.delta.v0.models.Organization]])
          case r if r.status == 401 => throw new io.flow.delta.v0.errors.UnitResponse(r.status)
          case r => throw new io.flow.delta.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200, 401")
        }
      }

      override def getById(
        id: String
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.delta.v0.models.Organization] = {
        _executeRequest("GET", s"/organizations/${play.utils.UriEncoding.encodePathSegment(id, "UTF-8")}").map {
          case r if r.status == 200 => _root_.io.flow.delta.v0.Client.parseJson("io.flow.delta.v0.models.Organization", r, _.validate[io.flow.delta.v0.models.Organization])
          case r if r.status == 401 => throw new io.flow.delta.v0.errors.UnitResponse(r.status)
          case r if r.status == 404 => throw new io.flow.delta.v0.errors.UnitResponse(r.status)
          case r => throw new io.flow.delta.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200, 401, 404")
        }
      }

      override def post(
        organizationForm: io.flow.delta.v0.models.OrganizationForm
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.delta.v0.models.Organization] = {
        val payload = play.api.libs.json.Json.toJson(organizationForm)

        _executeRequest("POST", s"/organizations", body = Some(payload)).map {
          case r if r.status == 201 => _root_.io.flow.delta.v0.Client.parseJson("io.flow.delta.v0.models.Organization", r, _.validate[io.flow.delta.v0.models.Organization])
          case r if r.status == 401 => throw new io.flow.delta.v0.errors.UnitResponse(r.status)
          case r if r.status == 422 => throw new io.flow.delta.v0.errors.ErrorsResponse(r)
          case r => throw new io.flow.delta.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 201, 401, 422")
        }
      }

      override def putById(
        id: String,
        organizationForm: io.flow.delta.v0.models.OrganizationForm
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.delta.v0.models.Organization] = {
        val payload = play.api.libs.json.Json.toJson(organizationForm)

        _executeRequest("PUT", s"/organizations/${play.utils.UriEncoding.encodePathSegment(id, "UTF-8")}", body = Some(payload)).map {
          case r if r.status == 200 => _root_.io.flow.delta.v0.Client.parseJson("io.flow.delta.v0.models.Organization", r, _.validate[io.flow.delta.v0.models.Organization])
          case r if r.status == 401 => throw new io.flow.delta.v0.errors.UnitResponse(r.status)
          case r if r.status == 422 => throw new io.flow.delta.v0.errors.ErrorsResponse(r)
          case r => throw new io.flow.delta.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200, 401, 422")
        }
      }

      override def deleteById(
        id: String
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Unit] = {
        _executeRequest("DELETE", s"/organizations/${play.utils.UriEncoding.encodePathSegment(id, "UTF-8")}").map {
          case r if r.status == 204 => ()
          case r if r.status == 401 => throw new io.flow.delta.v0.errors.UnitResponse(r.status)
          case r if r.status == 404 => throw new io.flow.delta.v0.errors.UnitResponse(r.status)
          case r => throw new io.flow.delta.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 204, 401, 404")
        }
      }
    }

    object Projects extends Projects {
      override def get(
        id: _root_.scala.Option[Seq[String]] = None,
        organization: _root_.scala.Option[String] = None,
        name: _root_.scala.Option[String] = None,
        limit: Long = 25,
        offset: Long = 0
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[io.flow.delta.v0.models.Project]] = {
        val queryParameters = Seq(
          organization.map("organization" -> _),
          name.map("name" -> _),
          Some("limit" -> limit.toString),
          Some("offset" -> offset.toString)
        ).flatten ++
          id.getOrElse(Nil).map("id" -> _)

        _executeRequest("GET", s"/projects", queryParameters = queryParameters).map {
          case r if r.status == 200 => _root_.io.flow.delta.v0.Client.parseJson("Seq[io.flow.delta.v0.models.Project]", r, _.validate[Seq[io.flow.delta.v0.models.Project]])
          case r if r.status == 401 => throw new io.flow.delta.v0.errors.UnitResponse(r.status)
          case r => throw new io.flow.delta.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200, 401")
        }
      }

      override def getById(
        id: String
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.delta.v0.models.Project] = {
        _executeRequest("GET", s"/projects/${play.utils.UriEncoding.encodePathSegment(id, "UTF-8")}").map {
          case r if r.status == 200 => _root_.io.flow.delta.v0.Client.parseJson("io.flow.delta.v0.models.Project", r, _.validate[io.flow.delta.v0.models.Project])
          case r if r.status == 401 => throw new io.flow.delta.v0.errors.UnitResponse(r.status)
          case r if r.status == 404 => throw new io.flow.delta.v0.errors.UnitResponse(r.status)
          case r => throw new io.flow.delta.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200, 401, 404")
        }
      }

      override def post(
        projectForm: io.flow.delta.v0.models.ProjectForm
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.delta.v0.models.Project] = {
        val payload = play.api.libs.json.Json.toJson(projectForm)

        _executeRequest("POST", s"/projects", body = Some(payload)).map {
          case r if r.status == 201 => _root_.io.flow.delta.v0.Client.parseJson("io.flow.delta.v0.models.Project", r, _.validate[io.flow.delta.v0.models.Project])
          case r if r.status == 401 => throw new io.flow.delta.v0.errors.UnitResponse(r.status)
          case r if r.status == 422 => throw new io.flow.delta.v0.errors.ErrorsResponse(r)
          case r => throw new io.flow.delta.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 201, 401, 422")
        }
      }

      override def putById(
        id: String,
        projectForm: io.flow.delta.v0.models.ProjectForm
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.delta.v0.models.Project] = {
        val payload = play.api.libs.json.Json.toJson(projectForm)

        _executeRequest("PUT", s"/projects/${play.utils.UriEncoding.encodePathSegment(id, "UTF-8")}", body = Some(payload)).map {
          case r if r.status == 200 => _root_.io.flow.delta.v0.Client.parseJson("io.flow.delta.v0.models.Project", r, _.validate[io.flow.delta.v0.models.Project])
          case r if r.status == 401 => throw new io.flow.delta.v0.errors.UnitResponse(r.status)
          case r if r.status == 422 => throw new io.flow.delta.v0.errors.ErrorsResponse(r)
          case r => throw new io.flow.delta.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200, 401, 422")
        }
      }

      override def deleteById(
        id: String
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Unit] = {
        _executeRequest("DELETE", s"/projects/${play.utils.UriEncoding.encodePathSegment(id, "UTF-8")}").map {
          case r if r.status == 204 => ()
          case r if r.status == 401 => throw new io.flow.delta.v0.errors.UnitResponse(r.status)
          case r if r.status == 404 => throw new io.flow.delta.v0.errors.UnitResponse(r.status)
          case r => throw new io.flow.delta.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 204, 401, 404")
        }
      }

      override def getStateAndLatestById(
        id: String
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.delta.v0.models.ProjectState] = {
        _executeRequest("GET", s"/projects/${play.utils.UriEncoding.encodePathSegment(id, "UTF-8")}/state/latest").map {
          case r if r.status == 200 => _root_.io.flow.delta.v0.Client.parseJson("io.flow.delta.v0.models.ProjectState", r, _.validate[io.flow.delta.v0.models.ProjectState])
          case r if r.status == 401 => throw new io.flow.delta.v0.errors.UnitResponse(r.status)
          case r if r.status == 404 => throw new io.flow.delta.v0.errors.UnitResponse(r.status)
          case r => throw new io.flow.delta.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200, 401, 404")
        }
      }

      override def getStateAndExpectedById(
        id: String
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[io.flow.delta.v0.models.State]] = {
        _executeRequest("GET", s"/projects/${play.utils.UriEncoding.encodePathSegment(id, "UTF-8")}/state/expected").map {
          case r if r.status == 200 => _root_.io.flow.delta.v0.Client.parseJson("Seq[io.flow.delta.v0.models.State]", r, _.validate[Seq[io.flow.delta.v0.models.State]])
          case r if r.status == 401 => throw new io.flow.delta.v0.errors.UnitResponse(r.status)
          case r if r.status == 404 => throw new io.flow.delta.v0.errors.UnitResponse(r.status)
          case r => throw new io.flow.delta.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200, 401, 404")
        }
      }

      override def postStateAndExpectedById(
        id: String
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[io.flow.delta.v0.models.StateForm]] = {
        _executeRequest("POST", s"/projects/${play.utils.UriEncoding.encodePathSegment(id, "UTF-8")}/state/expected").map {
          case r if r.status == 200 => _root_.io.flow.delta.v0.Client.parseJson("Seq[io.flow.delta.v0.models.StateForm]", r, _.validate[Seq[io.flow.delta.v0.models.StateForm]])
          case r if r.status == 401 => throw new io.flow.delta.v0.errors.UnitResponse(r.status)
          case r if r.status == 404 => throw new io.flow.delta.v0.errors.UnitResponse(r.status)
          case r => throw new io.flow.delta.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200, 401, 404")
        }
      }

      override def getStateAndActualById(
        id: String
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[io.flow.delta.v0.models.State]] = {
        _executeRequest("GET", s"/projects/${play.utils.UriEncoding.encodePathSegment(id, "UTF-8")}/state/actual").map {
          case r if r.status == 200 => _root_.io.flow.delta.v0.Client.parseJson("Seq[io.flow.delta.v0.models.State]", r, _.validate[Seq[io.flow.delta.v0.models.State]])
          case r if r.status == 401 => throw new io.flow.delta.v0.errors.UnitResponse(r.status)
          case r if r.status == 404 => throw new io.flow.delta.v0.errors.UnitResponse(r.status)
          case r => throw new io.flow.delta.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200, 401, 404")
        }
      }
    }

    object Repositories extends Repositories {
      override def getGithub(
        name: _root_.scala.Option[String] = None,
        organizationId: _root_.scala.Option[String] = None,
        existingProject: _root_.scala.Option[Boolean] = None,
        limit: Long = 25,
        offset: Long = 0
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[io.flow.delta.v0.models.Repository]] = {
        val queryParameters = Seq(
          name.map("name" -> _),
          organizationId.map("organization_id" -> _),
          existingProject.map("existing_project" -> _.toString),
          Some("limit" -> limit.toString),
          Some("offset" -> offset.toString)
        ).flatten

        _executeRequest("GET", s"/repositories/github", queryParameters = queryParameters).map {
          case r if r.status == 200 => _root_.io.flow.delta.v0.Client.parseJson("Seq[io.flow.delta.v0.models.Repository]", r, _.validate[Seq[io.flow.delta.v0.models.Repository]])
          case r if r.status == 401 => throw new io.flow.delta.v0.errors.UnitResponse(r.status)
          case r if r.status == 422 => throw new io.flow.delta.v0.errors.ErrorsResponse(r)
          case r => throw new io.flow.delta.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200, 401, 422")
        }
      }
    }

    object Subscriptions extends Subscriptions {
      override def get(
        id: _root_.scala.Option[Seq[String]] = None,
        userId: _root_.scala.Option[String] = None,
        identifier: _root_.scala.Option[String] = None,
        publication: _root_.scala.Option[io.flow.delta.v0.models.Publication] = None,
        limit: Long = 25,
        offset: Long = 0
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[io.flow.delta.v0.models.Subscription]] = {
        val queryParameters = Seq(
          userId.map("user_id" -> _),
          identifier.map("identifier" -> _),
          publication.map("publication" -> _.toString),
          Some("limit" -> limit.toString),
          Some("offset" -> offset.toString)
        ).flatten ++
          id.getOrElse(Nil).map("id" -> _)

        _executeRequest("GET", s"/subscriptions", queryParameters = queryParameters).map {
          case r if r.status == 200 => _root_.io.flow.delta.v0.Client.parseJson("Seq[io.flow.delta.v0.models.Subscription]", r, _.validate[Seq[io.flow.delta.v0.models.Subscription]])
          case r if r.status == 401 => throw new io.flow.delta.v0.errors.UnitResponse(r.status)
          case r => throw new io.flow.delta.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200, 401")
        }
      }

      override def getById(
        id: String
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.delta.v0.models.Subscription] = {
        _executeRequest("GET", s"/subscriptions/${play.utils.UriEncoding.encodePathSegment(id, "UTF-8")}").map {
          case r if r.status == 200 => _root_.io.flow.delta.v0.Client.parseJson("io.flow.delta.v0.models.Subscription", r, _.validate[io.flow.delta.v0.models.Subscription])
          case r if r.status == 401 => throw new io.flow.delta.v0.errors.UnitResponse(r.status)
          case r if r.status == 404 => throw new io.flow.delta.v0.errors.UnitResponse(r.status)
          case r => throw new io.flow.delta.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200, 401, 404")
        }
      }

      override def post(
        subscriptionForm: io.flow.delta.v0.models.SubscriptionForm,
        identifier: _root_.scala.Option[String] = None
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.delta.v0.models.Subscription] = {
        val payload = play.api.libs.json.Json.toJson(subscriptionForm)

        val queryParameters = Seq(
          identifier.map("identifier" -> _)
        ).flatten

        _executeRequest("POST", s"/subscriptions", body = Some(payload), queryParameters = queryParameters).map {
          case r if r.status == 201 => _root_.io.flow.delta.v0.Client.parseJson("io.flow.delta.v0.models.Subscription", r, _.validate[io.flow.delta.v0.models.Subscription])
          case r if r.status == 401 => throw new io.flow.delta.v0.errors.UnitResponse(r.status)
          case r if r.status == 422 => throw new io.flow.delta.v0.errors.ErrorsResponse(r)
          case r => throw new io.flow.delta.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 201, 401, 422")
        }
      }

      override def deleteById(
        id: String,
        identifier: _root_.scala.Option[String] = None
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Unit] = {
        val queryParameters = Seq(
          identifier.map("identifier" -> _)
        ).flatten

        _executeRequest("DELETE", s"/subscriptions/${play.utils.UriEncoding.encodePathSegment(id, "UTF-8")}", queryParameters = queryParameters).map {
          case r if r.status == 204 => ()
          case r if r.status == 401 => throw new io.flow.delta.v0.errors.UnitResponse(r.status)
          case r if r.status == 404 => throw new io.flow.delta.v0.errors.UnitResponse(r.status)
          case r => throw new io.flow.delta.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 204, 401, 404")
        }
      }
    }

    object Tokens extends Tokens {
      override def get(
        id: _root_.scala.Option[Seq[String]] = None,
        userId: _root_.scala.Option[String] = None,
        limit: Long = 25,
        offset: Long = 0
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[io.flow.delta.v0.models.Token]] = {
        val queryParameters = Seq(
          userId.map("user_id" -> _),
          Some("limit" -> limit.toString),
          Some("offset" -> offset.toString)
        ).flatten ++
          id.getOrElse(Nil).map("id" -> _)

        _executeRequest("GET", s"/tokens", queryParameters = queryParameters).map {
          case r if r.status == 200 => _root_.io.flow.delta.v0.Client.parseJson("Seq[io.flow.delta.v0.models.Token]", r, _.validate[Seq[io.flow.delta.v0.models.Token]])
          case r if r.status == 401 => throw new io.flow.delta.v0.errors.UnitResponse(r.status)
          case r => throw new io.flow.delta.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200, 401")
        }
      }

      override def getById(
        id: String
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.delta.v0.models.Token] = {
        _executeRequest("GET", s"/tokens/${play.utils.UriEncoding.encodePathSegment(id, "UTF-8")}").map {
          case r if r.status == 200 => _root_.io.flow.delta.v0.Client.parseJson("io.flow.delta.v0.models.Token", r, _.validate[io.flow.delta.v0.models.Token])
          case r if r.status == 401 => throw new io.flow.delta.v0.errors.UnitResponse(r.status)
          case r if r.status == 404 => throw new io.flow.delta.v0.errors.UnitResponse(r.status)
          case r => throw new io.flow.delta.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200, 401, 404")
        }
      }

      override def post(
        tokenForm: io.flow.delta.v0.models.TokenForm
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.delta.v0.models.Token] = {
        val payload = play.api.libs.json.Json.toJson(tokenForm)

        _executeRequest("POST", s"/tokens", body = Some(payload)).map {
          case r if r.status == 201 => _root_.io.flow.delta.v0.Client.parseJson("io.flow.delta.v0.models.Token", r, _.validate[io.flow.delta.v0.models.Token])
          case r if r.status == 401 => throw new io.flow.delta.v0.errors.UnitResponse(r.status)
          case r if r.status == 422 => throw new io.flow.delta.v0.errors.ErrorsResponse(r)
          case r => throw new io.flow.delta.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 201, 401, 422")
        }
      }

      override def deleteById(
        id: String
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Unit] = {
        _executeRequest("DELETE", s"/tokens/${play.utils.UriEncoding.encodePathSegment(id, "UTF-8")}").map {
          case r if r.status == 204 => ()
          case r if r.status == 401 => throw new io.flow.delta.v0.errors.UnitResponse(r.status)
          case r if r.status == 404 => throw new io.flow.delta.v0.errors.UnitResponse(r.status)
          case r => throw new io.flow.delta.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 204, 401, 404")
        }
      }
    }

    object Users extends Users {
      override def get(
        id: _root_.scala.Option[String] = None,
        email: _root_.scala.Option[String] = None,
        identifier: _root_.scala.Option[String] = None
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[io.flow.common.v0.models.User]] = {
        val queryParameters = Seq(
          id.map("id" -> _),
          email.map("email" -> _),
          identifier.map("identifier" -> _)
        ).flatten

        _executeRequest("GET", s"/users", queryParameters = queryParameters).map {
          case r if r.status == 200 => _root_.io.flow.delta.v0.Client.parseJson("Seq[io.flow.common.v0.models.User]", r, _.validate[Seq[io.flow.common.v0.models.User]])
          case r if r.status == 401 => throw new io.flow.delta.v0.errors.UnitResponse(r.status)
          case r => throw new io.flow.delta.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200, 401")
        }
      }

      override def getById(
        id: String
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.common.v0.models.User] = {
        _executeRequest("GET", s"/users/${play.utils.UriEncoding.encodePathSegment(id, "UTF-8")}").map {
          case r if r.status == 200 => _root_.io.flow.delta.v0.Client.parseJson("io.flow.common.v0.models.User", r, _.validate[io.flow.common.v0.models.User])
          case r if r.status == 401 => throw new io.flow.delta.v0.errors.UnitResponse(r.status)
          case r if r.status == 404 => throw new io.flow.delta.v0.errors.UnitResponse(r.status)
          case r => throw new io.flow.delta.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200, 401, 404")
        }
      }

      override def getIdentifierById(
        id: String
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.delta.v0.models.UserIdentifier] = {
        _executeRequest("GET", s"/users/${play.utils.UriEncoding.encodePathSegment(id, "UTF-8")}/identifier").map {
          case r if r.status == 200 => _root_.io.flow.delta.v0.Client.parseJson("io.flow.delta.v0.models.UserIdentifier", r, _.validate[io.flow.delta.v0.models.UserIdentifier])
          case r if r.status == 401 => throw new io.flow.delta.v0.errors.UnitResponse(r.status)
          case r if r.status == 404 => throw new io.flow.delta.v0.errors.UnitResponse(r.status)
          case r => throw new io.flow.delta.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200, 401, 404")
        }
      }

      override def post(
        userForm: io.flow.delta.v0.models.UserForm
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.common.v0.models.User] = {
        val payload = play.api.libs.json.Json.toJson(userForm)

        _executeRequest("POST", s"/users", body = Some(payload)).map {
          case r if r.status == 201 => _root_.io.flow.delta.v0.Client.parseJson("io.flow.common.v0.models.User", r, _.validate[io.flow.common.v0.models.User])
          case r if r.status == 422 => throw new io.flow.delta.v0.errors.ErrorsResponse(r)
          case r => throw new io.flow.delta.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 201, 422")
        }
      }
    }

    def _requestHolder(path: String): play.api.libs.ws.WSRequest = {
      import play.api.Play.current

      val holder = play.api.libs.ws.WS.url(apiUrl + path).withHeaders(
        "User-Agent" -> Constants.UserAgent,
        "X-Apidoc-Version" -> Constants.Version,
        "X-Apidoc-Version-Major" -> Constants.VersionMajor.toString
      ).withHeaders(defaultHeaders : _*)
      auth.fold(holder) {
        case Authorization.Basic(username, password) => {
          holder.withAuth(username, password.getOrElse(""), play.api.libs.ws.WSAuthScheme.BASIC)
        }
        case a => sys.error("Invalid authorization scheme[" + a.getClass + "]")
      }
    }

    def _logRequest(method: String, req: play.api.libs.ws.WSRequest)(implicit ec: scala.concurrent.ExecutionContext): play.api.libs.ws.WSRequest = {
      val queryComponents = for {
        (name, values) <- req.queryString
        value <- values
      } yield s"$name=$value"
      val url = s"${req.url}${queryComponents.mkString("?", "&", "")}"
      auth.fold(logger.info(s"curl -X $method $url")) { _ =>
        logger.info(s"curl -X $method -u '[REDACTED]:' $url")
      }
      req
    }

    def _executeRequest(
      method: String,
      path: String,
      queryParameters: Seq[(String, String)] = Seq.empty,
      body: Option[play.api.libs.json.JsValue] = None
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[play.api.libs.ws.WSResponse] = {
      method.toUpperCase match {
        case "GET" => {
          _logRequest("GET", _requestHolder(path).withQueryString(queryParameters:_*)).get()
        }
        case "POST" => {
          _logRequest("POST", _requestHolder(path).withQueryString(queryParameters:_*).withHeaders("Content-Type" -> "application/json; charset=UTF-8")).post(body.getOrElse(play.api.libs.json.Json.obj()))
        }
        case "PUT" => {
          _logRequest("PUT", _requestHolder(path).withQueryString(queryParameters:_*).withHeaders("Content-Type" -> "application/json; charset=UTF-8")).put(body.getOrElse(play.api.libs.json.Json.obj()))
        }
        case "PATCH" => {
          _logRequest("PATCH", _requestHolder(path).withQueryString(queryParameters:_*)).patch(body.getOrElse(play.api.libs.json.Json.obj()))
        }
        case "DELETE" => {
          _logRequest("DELETE", _requestHolder(path).withQueryString(queryParameters:_*)).delete()
        }
         case "HEAD" => {
          _logRequest("HEAD", _requestHolder(path).withQueryString(queryParameters:_*)).head()
        }
         case "OPTIONS" => {
          _logRequest("OPTIONS", _requestHolder(path).withQueryString(queryParameters:_*)).options()
        }
        case _ => {
          _logRequest(method, _requestHolder(path).withQueryString(queryParameters:_*))
          sys.error("Unsupported method[%s]".format(method))
        }
      }
    }

  }

  object Client {

    def parseJson[T](
      className: String,
      r: play.api.libs.ws.WSResponse,
      f: (play.api.libs.json.JsValue => play.api.libs.json.JsResult[T])
    ): T = {
      f(play.api.libs.json.Json.parse(r.body)) match {
        case play.api.libs.json.JsSuccess(x, _) => x
        case play.api.libs.json.JsError(errors) => {
          throw new io.flow.delta.v0.errors.FailedRequest(r.status, s"Invalid json for class[" + className + "]: " + errors.mkString(" "))
        }
      }
    }

  }

  sealed trait Authorization
  object Authorization {
    case class Basic(username: String, password: Option[String] = None) extends Authorization
  }

  package interfaces {

    trait Client {
      def githubUsers: io.flow.delta.v0.GithubUsers
      def githubWebhooks: io.flow.delta.v0.GithubWebhooks
      def healthchecks: io.flow.delta.v0.Healthchecks
      def images: io.flow.delta.v0.Images
      def items: io.flow.delta.v0.Items
      def memberships: io.flow.delta.v0.Memberships
      def organizations: io.flow.delta.v0.Organizations
      def projects: io.flow.delta.v0.Projects
      def repositories: io.flow.delta.v0.Repositories
      def subscriptions: io.flow.delta.v0.Subscriptions
      def tokens: io.flow.delta.v0.Tokens
      def users: io.flow.delta.v0.Users
    }

  }

  trait GithubUsers {
    /**
     * Used to authenticate a user via github
     */
    def postGithub(
      githubAuthenticationForm: io.flow.delta.v0.models.GithubAuthenticationForm
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.common.v0.models.User]
  }

  trait GithubWebhooks {
    /**
     * Receives a webhook on push for this particular project
     */
    def postByProjectId(
      projectId: String
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Unit]
  }

  trait Healthchecks {
    def getHealthcheck()(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.common.v0.models.Healthcheck]
  }

  trait Images {
    /**
     * Returns a list of all matching images
     */
    def get(
      name: _root_.scala.Option[String] = None,
      limit: Long = 25,
      offset: Long = 0
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[io.flow.delta.v0.models.Image]]
  }

  trait Items {
    /**
     * Returns a list of all matching items
     */
    def get(
      q: _root_.scala.Option[String] = None,
      limit: Long = 25,
      offset: Long = 0
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[io.flow.delta.v0.models.Item]]
  }

  trait Memberships {
    /**
     * Search all memberships. Results are always paginated.
     */
    def get(
      id: _root_.scala.Option[Seq[String]] = None,
      organization: _root_.scala.Option[String] = None,
      userId: _root_.scala.Option[String] = None,
      role: _root_.scala.Option[io.flow.delta.v0.models.Role] = None,
      limit: Long = 25,
      offset: Long = 0
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[io.flow.delta.v0.models.Membership]]

    def getById(
      id: String
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.delta.v0.models.Membership]

    def post(
      membershipForm: io.flow.delta.v0.models.MembershipForm
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.delta.v0.models.Membership]

    def deleteById(
      id: String
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Unit]
  }

  trait Organizations {
    /**
     * Search organizations. Results are paginated
     */
    def get(
      id: _root_.scala.Option[Seq[String]] = None,
      userId: _root_.scala.Option[String] = None,
      limit: Long = 25,
      offset: Long = 0
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[io.flow.delta.v0.models.Organization]]

    /**
     * Returns information about the organization with this id.
     */
    def getById(
      id: String
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.delta.v0.models.Organization]

    /**
     * Create a new organization.
     */
    def post(
      organizationForm: io.flow.delta.v0.models.OrganizationForm
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.delta.v0.models.Organization]

    /**
     * Update an existing organization.
     */
    def putById(
      id: String,
      organizationForm: io.flow.delta.v0.models.OrganizationForm
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.delta.v0.models.Organization]

    def deleteById(
      id: String
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Unit]
  }

  trait Projects {
    /**
     * Search projects. Results are paginated
     */
    def get(
      id: _root_.scala.Option[Seq[String]] = None,
      organization: _root_.scala.Option[String] = None,
      name: _root_.scala.Option[String] = None,
      limit: Long = 25,
      offset: Long = 0
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[io.flow.delta.v0.models.Project]]

    /**
     * Returns information about the project with this id.
     */
    def getById(
      id: String
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.delta.v0.models.Project]

    /**
     * Create a new project.
     */
    def post(
      projectForm: io.flow.delta.v0.models.ProjectForm
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.delta.v0.models.Project]

    /**
     * Update an existing project.
     */
    def putById(
      id: String,
      projectForm: io.flow.delta.v0.models.ProjectForm
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.delta.v0.models.Project]

    def deleteById(
      id: String
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Unit]

    def getStateAndLatestById(
      id: String
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.delta.v0.models.ProjectState]

    def getStateAndExpectedById(
      id: String
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[io.flow.delta.v0.models.State]]

    def postStateAndExpectedById(
      id: String
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[io.flow.delta.v0.models.StateForm]]

    def getStateAndActualById(
      id: String
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[io.flow.delta.v0.models.State]]
  }

  trait Repositories {
    /**
     * Returns a list of repositories from github
     */
    def getGithub(
      name: _root_.scala.Option[String] = None,
      organizationId: _root_.scala.Option[String] = None,
      existingProject: _root_.scala.Option[Boolean] = None,
      limit: Long = 25,
      offset: Long = 0
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[io.flow.delta.v0.models.Repository]]
  }

  trait Subscriptions {
    /**
     * Search subscriptions. Always paginated.
     */
    def get(
      id: _root_.scala.Option[Seq[String]] = None,
      userId: _root_.scala.Option[String] = None,
      identifier: _root_.scala.Option[String] = None,
      publication: _root_.scala.Option[io.flow.delta.v0.models.Publication] = None,
      limit: Long = 25,
      offset: Long = 0
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[io.flow.delta.v0.models.Subscription]]

    /**
     * Returns information about a specific subscription.
     */
    def getById(
      id: String
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.delta.v0.models.Subscription]

    /**
     * Create a new subscription.
     */
    def post(
      subscriptionForm: io.flow.delta.v0.models.SubscriptionForm,
      identifier: _root_.scala.Option[String] = None
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.delta.v0.models.Subscription]

    def deleteById(
      id: String,
      identifier: _root_.scala.Option[String] = None
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Unit]
  }

  trait Tokens {
    def get(
      id: _root_.scala.Option[Seq[String]] = None,
      userId: _root_.scala.Option[String] = None,
      limit: Long = 25,
      offset: Long = 0
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[io.flow.delta.v0.models.Token]]

    /**
     * Used to fetch one token
     */
    def getById(
      id: String
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.delta.v0.models.Token]

    /**
     * Create a new API token for this user
     */
    def post(
      tokenForm: io.flow.delta.v0.models.TokenForm
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.delta.v0.models.Token]

    def deleteById(
      id: String
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Unit]
  }

  trait Users {
    /**
     * Search for a specific user. You must specify at least 1 parameter - either a id
     * or email - and will receive back either 0 or 1 users.
     */
    def get(
      id: _root_.scala.Option[String] = None,
      email: _root_.scala.Option[String] = None,
      identifier: _root_.scala.Option[String] = None
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[io.flow.common.v0.models.User]]

    /**
     * Returns information about the user with this id.
     */
    def getById(
      id: String
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.common.v0.models.User]

    /**
     * Returns the latest identifier for this user. The basic use case is to enable
     * things like unsubscribe w/out  login (and thus once you have an identifier, you
     * can GET /users?identifier=xxx). Identifiers are rotated regularly with last n
     * identifiers being valid (allowing eventual expiration).
     */
    def getIdentifierById(
      id: String
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.delta.v0.models.UserIdentifier]

    /**
     * Create a new user.
     */
    def post(
      userForm: io.flow.delta.v0.models.UserForm
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.common.v0.models.User]
  }

  package errors {

    import io.flow.common.v0.models.json._
    import io.flow.delta.v0.models.json._

    case class ErrorsResponse(
      response: play.api.libs.ws.WSResponse,
      message: Option[String] = None
    ) extends Exception(message.getOrElse(response.status + ": " + response.body)){
      lazy val errors = _root_.io.flow.delta.v0.Client.parseJson("Seq[io.flow.common.v0.models.Error]", response, _.validate[Seq[io.flow.common.v0.models.Error]])
    }

    case class UnitResponse(status: Int) extends Exception(s"HTTP $status")

    case class FailedRequest(responseCode: Int, message: String, requestUri: Option[_root_.java.net.URI] = None) extends Exception(s"HTTP $responseCode: $message")

  }

}